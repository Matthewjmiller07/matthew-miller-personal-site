---
const navLinks = [
    { href: "/", label: "Home" },
    { href: "/about", label: "About" },
    { 
        href: "/art",
        label: "Art",
        submenu: [
            { href: "/art/ai-matthew", label: "AI Portraits" },
            { href: "/art/ai-art", label: "AI Art Gallery" }
        ]
    },
    { href: "/projects", label: "Projects" },
    { href: "/jewish-studies", label: "Podcast" },
    { href: "/media-appearances", label: "Media Mentions" },
];

const isCurrentPage = (linkHref: string) => {
    if (linkHref === "/") {
        return Astro.url.pathname === "/";
    }
    // Special case for Art section to highlight when any art subpage is active
    if (linkHref === "/art") {
        return Astro.url.pathname === "/art" || Astro.url.pathname.startsWith('/art/');
    }
    return Astro.url.pathname === linkHref || Astro.url.pathname.startsWith(linkHref + '/');
};

// Check if we should show the submenu (for Art section)
const shouldShowSubmenu = (link: any) => {
    if (!link.submenu) return false;
    return isCurrentPage(link.href) || link.submenu.some((item: any) => isCurrentPage(item.href));
};
---
<header class="bg-card-bg-light/98 dark:bg-card-bg-dark/98 backdrop-blur-lg shadow-sm sticky top-0 z-50 border-b border-border-light dark:border-border-dark">
    <nav class="container mx-auto px-4 sm:px-6 lg:px-8 h-16 flex items-center justify-between" aria-label="Main navigation">
        <div class="flex-shrink-0">
            <a href="/" class="text-xl font-bold text-accent dark:text-accent-dark hover:opacity-80 transition-opacity focus:outline-none focus:ring-2 focus:ring-accent rounded-sm" aria-label="Matthew Miller - Homepage">
                Matthew Miller
            </a>
        </div>

        {/* Mobile Menu Button */}
        <div class="md:hidden">
            <button id="mobile-menu-button" type="button" class="inline-flex items-center justify-center p-2 rounded-md text-secondary-light dark:text-secondary-dark hover:text-primary-light dark:hover:text-primary-dark hover:bg-slate-200 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-accent" aria-controls="main-menu-mobile" aria-expanded="false">
                <span class="sr-only">Open main menu</span>
                <svg id="icon-menu-closed" class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                </svg>
                <svg id="icon-menu-open" class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        {/* Desktop Menu */}
        <div class="hidden md:flex md:ml-6 md:items-center md:space-x-1 lg:space-x-2">
            {navLinks.map(link => (
                link.href ? (
                    <a
                        href={link.href}
                        class:list={[
                            "px-3 py-2 rounded-md text-sm font-medium transition-colors duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-light dark:focus:ring-offset-bg-dark focus:ring-accent",
                            isCurrentPage(link.href)
                                ? "bg-accent/10 text-accent dark:text-accent-dark"
                                : "text-primary-light dark:text-primary-dark hover:bg-slate-200/70 dark:hover:bg-slate-700/70 hover:text-accent dark:hover:text-accent-dark"
                        ]}
                        aria-current={isCurrentPage(link.href) ? 'page' : undefined}
                    >
                        {link.label}
                    </a>
                ) : (
                    <div class="relative group">
                        <a
                            href={link.href}
                            class:list={[
                                "px-3 py-2 rounded-md text-sm font-medium transition-colors duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-light dark:focus:ring-offset-bg-dark focus:ring-accent inline-flex items-center",
                                isCurrentPage(link.href)
                                    ? "bg-accent/10 text-accent dark:text-accent-dark"
                                    : "text-primary-light dark:text-primary-dark hover:bg-slate-200/70 dark:hover:bg-slate-700/70 hover:text-accent dark:hover:text-accent-dark"
                            ]}
                            aria-current={isCurrentPage(link.href) ? 'page' : undefined}
                            aria-haspopup="true"
                            aria-expanded={shouldShowSubmenu(link) ? 'true' : 'false'}
                        >
                            {link.label}
                            <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </a>
                        <div class:list={[
                            "absolute left-0 mt-1 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 z-50 transition-all duration-200 transform origin-top-left",
                            shouldShowSubmenu(link) 
                                ? "opacity-100 visible scale-100" 
                                : "opacity-0 invisible scale-95 group-hover:opacity-100 group-hover:visible group-hover:scale-100"
                        ]} style="pointer-events: auto;">
                            <div class="py-1">
                                {link.submenu?.map(subLink => (
                                    <a
                                        href={subLink.href}
                                        class:list={[
                                            "block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700",
                                            isCurrentPage(subLink.href) ? "bg-gray-100 dark:bg-gray-700" : ""
                                        ]}
                                        aria-current={isCurrentPage(subLink.href) ? 'page' : undefined}
                                    >
                                        {subLink.label}
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>
                )
            ))}
        </div>
    </nav>

    {/* Mobile menu, show/hide based on menu state. */}
    <div class="hidden md:hidden" id="main-menu-mobile">
        <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-border-light dark:border-border-dark">
            {navLinks.map(link => (
                link.href ? (
                    <a
                        href={link.href}
                        class:list={[
                            "block px-3 py-2 rounded-md text-base font-medium transition-colors duration-150 ease-in-out",
                            isCurrentPage(link.href)
                                ? "bg-accent/10 text-accent dark:text-accent-dark"
                                : "text-primary-light dark:text-primary-dark hover:bg-slate-200 dark:hover:bg-slate-700 hover:text-accent dark:hover:text-accent-dark"
                        ]}
                        aria-current={isCurrentPage(link.href) ? 'page' : undefined}
                    >
                        {link.label}
                    </a>
                ) : (
                    <div class="space-y-1">
                        <button class="mobile-menu-dropdown w-full flex justify-between items-center px-3 py-2 rounded-md text-base font-medium text-left text-primary-light dark:text-primary-dark hover:bg-slate-200 dark:hover:bg-slate-700">
                            {link.label}
                            <svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div class="pl-4 hidden">
                            {link.submenu?.map(subLink => (
                                <a
                                    href={subLink.href}
                                    class:list={[
                                        "block px-3 py-2 rounded-md text-sm font-medium transition-colors duration-150 ease-in-out",
                                        isCurrentPage(subLink.href)
                                            ? "bg-accent/10 text-accent dark:text-accent-dark"
                                            : "text-primary-light dark:text-primary-dark hover:bg-slate-200 dark:hover:bg-slate-700"
                                    ]}
                                    aria-current={isCurrentPage(subLink.href) ? 'page' : undefined}
                                >
                                    {subLink.label}
                                </a>
                            ))}
                        </div>
                    </div>
                )
            ))}
        </div>
    </div>
</header>

<script is:inline>
    document.addEventListener('astro:page-load', () => {
        const menuButton = document.getElementById('mobile-menu-button');
        const mainMenu = document.getElementById('main-menu-mobile');
        const iconClosed = document.getElementById('icon-menu-closed');
        const iconOpen = document.getElementById('icon-menu-open');

        if (!menuButton || !mainMenu || !iconClosed || !iconOpen) return;

        function toggleMenu() {
            mainMenu.classList.toggle('hidden');
            iconClosed.classList.toggle('hidden');
            iconClosed.classList.toggle('block');
            iconOpen.classList.toggle('hidden');
            iconOpen.classList.toggle('block');
            menuButton.setAttribute('aria-expanded', mainMenu.classList.contains('hidden') ? 'false' : 'true');
        }

        // Handle menu button clicks
        menuButton.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleMenu();
        });

        // Handle mobile dropdown toggles
        document.querySelectorAll('.mobile-menu-dropdown').forEach(button => {
            button.addEventListener('click', (e) => {
                e.stopPropagation();
                const submenu = button.nextElementSibling;
                const isExpanded = submenu.classList.toggle('hidden');
                const icon = button.querySelector('svg');
                if (icon) {
                    icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';
                }
            });
        });

        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
            if (!mainMenu.classList.contains('hidden') && 
                !menuButton.contains(e.target) && 
                !mainMenu.contains(e.target)) {
                toggleMenu();
            }
        });

        // Close menu when clicking a link
        mainMenu.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', toggleMenu);
        });
    });
</script>