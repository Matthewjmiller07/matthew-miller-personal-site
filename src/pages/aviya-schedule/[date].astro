---
import Layout from '../../layouts/Layout.astro';
import { parse } from 'csv-parse/sync';
import fs from 'fs';
import path from 'path';
import { format } from 'date-fns';
// Do not use any async/await in the frontmatter section

// Hebrew translations for UI elements
const hebrewTranslations = {
  // Days of week
  'Sunday': 'יום ראשון',
  'Monday': 'יום שני',
  'Tuesday': 'יום שלישי',
  'Wednesday': 'יום רביעי',
  'Thursday': 'יום חמישי',
  'Friday': 'יום שישי',
  'Saturday': 'יום שבת',
  
  // Book names - Genesis, etc.
  'Genesis': 'בראשית',
  'Exodus': 'שמות',
  'Leviticus': 'ויקרא',
  'Numbers': 'במדבר',
  'Deuteronomy': 'דברים',
  
  // UI elements
  'Back to Schedule': 'חזרה ללוח',
  'First Day': 'יום ראשון',
  'Previous Day': 'יום קודם',
  'Next Day': 'יום הבא',
  'Last Day': 'יום אחרון',
  "Today's Readings": 'קריאות היום',
  'Text Content': 'תוכן הטקסט',
  'Notes': 'הערות',
  'Add your notes here...': 'הוסף את ההערות שלך כאן...',
  'Images': 'תמונות',
  'Drag and drop images here': 'גרור ושחרר תמונות כאן',
  'or': 'או',
  'Select Images': 'בחר תמונות',
  'Both': 'שניהם',
  'Hebrew Only': 'עברית בלבד',
  'English Only': 'אנגלית בלבד'
};

// Function to translate Bible references to Hebrew
function translateReferenceToHebrew(reference) {
  const bookMap = {
    'Genesis': 'בראשית',
    'Exodus': 'שמות',
    'Leviticus': 'ויקרא',
    'Numbers': 'במדבר',
    'Deuteronomy': 'דברים'
  };
  
  let hebrewReference = reference;
  Object.entries(bookMap).forEach(([english, hebrew]) => {
    if (reference.includes(english)) {
      hebrewReference = reference.replace(english, hebrew);
    }
  });
  
  return hebrewReference;
}

// Get the date parameter from URL
const { date: dateParam } = Astro.params;

// Read the CSV data
const csvFilePath = path.join(process.cwd(), 'public', 'aviya.csv');
let record;
let readings = [];
let prevDate = null;
let nextDate = null;
let dayOfWeek = '';
let notes = '';
let images = [];
let date = new Date();
let formattedDate = format(date, 'MMMM d, yyyy');
let texts = [];

try {
  // Read the CSV file (synchronously)
  const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
  const records = parse(csvContent, {
    columns: true,
    skip_empty_lines: true
  });
  
  // Detailed debugging of CSV records
  console.log('First CSV record:', records[0]);
  console.log('Request URL date parameter:', dateParam);
  
  // Parse dates in a timezone-safe way without the shifting problem
  records.forEach((record, idx) => {
    // Store the original date value
    record._originalDate = record.Date;
    
    // Parse the CSV date manually to avoid timezone issues
    // This is critical: we'll split the date and parse year/month/day directly
    const csvDateParts = record.Date.split('-');
    if (csvDateParts.length === 3) {
      // We use explicit UTC date construction to avoid timezone shifts
      const exactDateStr = `${csvDateParts[0]}-${csvDateParts[1].padStart(2, '0')}-${csvDateParts[2].padStart(2, '0')}`;
      record._normalizedDate = exactDateStr;
    } else {
      // Fallback - but we shouldn't need this
      record._normalizedDate = record.Date;
    }
    
    console.log(`Record ${idx}: ${record._originalDate} (${record["Day of Week"]}) => ${record._normalizedDate} [${record.Reading.slice(0, 30)}...]`);
  });
  
  // Direct string comparison without Date object manipulation
  // This ensures timezone issues don't affect the matching
  const currentIndex = records.findIndex(r => r._normalizedDate === dateParam);
  console.log('Found index for', dateParam, ':', currentIndex);
  
  // If date not found, redirect to the first date in the schedule
  if (currentIndex === -1) {
    // Get the first date in proper format
    const firstCSVDate = records[0]._normalizedDate;
    console.log(`Date ${dateParam} not found in schedule. Redirecting to first date: ${firstCSVDate}`);
    console.log(`First date readings: ${records[0].Reading}`);
    
    // Force redirect to the first valid date from the CSV
    return Astro.redirect(`/aviya-schedule/${firstCSVDate}`);
  }
  
  // We found the date - let's ensure we're showing the right record
  const recordFound = records[currentIndex];
  console.log(`Found record for ${dateParam}: ${recordFound._originalDate} (${recordFound["Day of Week"]})`);
  console.log(`Readings: ${recordFound.Reading.slice(0, 50)}...`);
  
  // Date found, continue with the record
    record = records[currentIndex];
    readings = record.Reading.split(', ');
    dayOfWeek = record["Day of Week"];
    notes = record.Notes || '';
    
    // Parse images if available
    if (record.Images) {
      console.log('Found Images data:', record.Images);
      try {
        // Try to parse as JSON first
        if (record.Images.startsWith('[')) {
          images = JSON.parse(record.Images);
          console.log('Parsed images as JSON array:', images);
        } else {
          // Otherwise, split by commas if present
          if (record.Images.includes(',')) {
            images = record.Images.split(',').map(img => img.trim());
            console.log('Split images by comma:', images);
          } else {
            images = [record.Images.trim()];
            console.log('Single image found:', images);
          }
        }
      } catch (error) {
        console.error('Error parsing images:', error);
        images = [];
      }
    }
    
    // Get previous and next dates for navigation - use normalized dates to avoid timezone issues
    if (currentIndex > 0) {
      prevDate = records[currentIndex - 1]._normalizedDate;
      console.log(`Previous date set to: ${prevDate}`);
    }
    
    if (currentIndex < records.length - 1) {
      nextDate = records[currentIndex + 1]._normalizedDate;
      console.log(`Next date set to: ${nextDate}`);
    }
    
    // Avoid using JavaScript Date objects entirely - use string manipulation directly
    // Get the record's date parts
    const [year, monthStr, dayStr] = record.Date.split('-');
    const monthNum = parseInt(monthStr);
    const dayNum = parseInt(dayStr);
    
    // Create month name lookup instead of using JavaScript Date
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June', 
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    
    // Format date manually as "Month Day, Year" 
    formattedDate = `${monthNames[monthNum-1]} ${dayNum}, ${year}`;
    console.log(`DIRECT string formatting from [${record.Date}] to [${formattedDate}]`);
    
    // NOTE: We've moved the Sefaria API fetching to client-side JS
    // instead of server-side to avoid async issues in Astro frontmatter
} catch (error) {
  console.error('Error reading or parsing CSV:', error);
}
---

<Layout title={`Aviya Schedule - ${formattedDate}`}>
  <div class="container mx-auto px-4 py-8 text-black dark:text-white">
    <div class="mb-8 flex justify-between items-center">
      <a href="/aviya-schedule" class="text-blue-600 dark:text-blue-400 hover:underline">
        <span class="english-ui">&larr; Back to Schedule</span>
        <span class="hebrew-ui hidden">{hebrewTranslations['Back to Schedule']} &rarr;</span>
      </a>
      
      <button id="siteLanguageToggle" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm">
        <span class="english-ui">עברית</span>
        <span class="hebrew-ui hidden">English</span>
      </button>
    </div>
    
    <h1 class="text-3xl font-bold mb-2">{formattedDate}</h1>
    <h2 class="text-xl mb-6">
      <span class="english-ui">{dayOfWeek}</span>
      <span class="hebrew-ui hidden">{hebrewTranslations[dayOfWeek] || dayOfWeek}</span>
    </h2>
    
    <!-- Navigation between days -->
    <div class="flex justify-between mb-8">
      {prevDate ? (
        <a href={`/aviya-schedule/${prevDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          <span class="english-ui">&larr; Previous Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Previous Day']} &rarr;</span>
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">
          <span class="english-ui">First Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['First Day']}</span>
        </span>
      )}
      
      {nextDate ? (
        <a href={`/aviya-schedule/${nextDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          <span class="english-ui">Next Day &rarr;</span>
          <span class="hebrew-ui hidden">&larr; {hebrewTranslations['Next Day']}</span>
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">
          <span class="english-ui">Last Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Last Day']}</span>
        </span>
      )}
    </div>
    
    <!-- List of readings only for small screen view -->
    <div class="lg:hidden mb-10">
      <h3 class="text-2xl font-semibold mb-4">
        <span class="english-ui">Quick Navigation</span>
        <span class="hebrew-ui hidden">ניווט מהיר</span>
      </h3>
      <ul class="list-disc list-inside">
        {readings.map((reading) => {
          const verseId = `verse-${reading.replace(/\s+|:/g, '-').toLowerCase()}`;
          return (
            <li>
              <a href={`#${verseId}`} class="text-blue-600 dark:text-blue-400 hover:underline">
                <span class="english-ui">{reading}</span>
                <span class="hebrew-ui hidden">{translateReferenceToHebrew(reading)}</span>
              </a>
            </li>
          );
        })}
      </ul>
    </div>
    
    <!-- Daily readings -->
    <div class="mb-10">
      <h3 class="text-2xl font-semibold mb-4 hidden lg:block">
        <span class="english-ui">Today's Readings</span>
        <span class="hebrew-ui hidden">{hebrewTranslations["Today's Readings"]}</span>
      </h3>
      <ul class="hidden lg:block">
        {readings.map((reference, index) => {
          const verseId = `verse-${reference.replace(/\s+|:/g, '-').toLowerCase()}`;
          return (
            <li class="mb-2">
              <a href={`#${verseId}`} class="text-blue-600 dark:text-blue-400 hover:underline">
                <strong class="text-lg">
                  <span class="english-ui">{reference}</span>
                  <span class="hebrew-ui hidden">{translateReferenceToHebrew(reference)}</span>
                </strong>
              </a>
            </li>
          );
        })}
      </ul>
    </div>
    
    <!-- Text content from Sefaria -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Text Content</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Text Content']}</span>
        </h3>
        
        <div class="flex space-x-2 english-ui">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">Both</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">Hebrew Only</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">English Only</button>
        </div>
        
        <div class="flex space-x-2 hebrew-ui hidden">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">{hebrewTranslations['Both']}</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">{hebrewTranslations['Hebrew Only']}</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">{hebrewTranslations['English Only']}</button>
        </div>
      </div>
      
      <div class="grid gap-8">
        {readings.map((reference, index) => {
          const textData = texts[index];
          const verseId = `verse-${reference.replace(/\s+|:/g, '-').toLowerCase()}`;
          return (
            <div id={verseId} class="border dark:border-gray-700 rounded-lg p-6 bg-gray-50 dark:bg-gray-800 scroll-mt-20">
              <h4 class="text-xl font-semibold mb-3">
                <span class="english-ui">{reference}</span>
                <span class="hebrew-ui hidden">{translateReferenceToHebrew(reference)}</span>
              </h4>
              
              <div class="grid md:grid-cols-2 gap-6">
                <!-- Hebrew text -->
                <div dir="rtl" lang="he" class="font-serif text-lg leading-relaxed hebrew-text">
                  <Fragment set:html={textData?.he || "Loading Hebrew text..."} />
                </div>
                
                <!-- English text -->
                <div class="font-serif text-lg leading-relaxed english-text">
                  <Fragment set:html={textData?.text || "Loading English text..."} />
                </div>
              </div>
              
              {/* Verse notes */}
              <div class="mt-6">
                <div class="flex justify-between items-center mb-2">
                  <h5 class="text-lg font-semibold">
                    <span class="english-ui">Verse Notes</span>
                    <span class="hebrew-ui hidden">{hebrewTranslations['Verse Notes'] || 'הערות לפסוק'}</span>
                  </h5>
                  <div class="flex space-x-2">
                    <button 
                      class="verse-save-btn px-3 py-1 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 transition"
                      data-reference={reference}>
                      <span class="english-ui">Save</span>
                      <span class="hebrew-ui hidden">{hebrewTranslations['Save'] || 'שמור'}</span>
                    </button>
                    <button 
                      class="verse-delete-btn px-3 py-1 text-sm rounded-md bg-red-600 text-white hover:bg-red-700 transition"
                      data-reference={reference}>
                      <span class="english-ui">Delete</span>
                      <span class="hebrew-ui hidden">{hebrewTranslations['Delete'] || 'מחק'}</span>
                    </button>
                  </div>
                </div>
                <textarea 
                  class="verse-note w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white" 
                  data-reference={reference} 
                  rows="3"
                  placeholder="Add your notes for this verse..."></textarea>
              </div>
            </div>
          );
        })}
      </div>
    </div>
    
    <!-- Notes section -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Notes</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Notes']}</span>
        </h3>
        
        <button id="save-notes-btn" class="px-4 py-2 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 transition">
          <span class="english-ui">Save Notes</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Save Notes'] || 'שמור הערות'}</span>
        </button>
      </div>

      <div class="bg-yellow-50 dark:bg-gray-700 border-l-4 border-yellow-400 p-4 mb-6">
        <p class="text-sm text-yellow-800 dark:text-yellow-200">
          <span class="english-ui">Notes for each verse are saved separately. Click "Save Notes" when you're done editing.</span>
          <span class="hebrew-ui hidden">הערות לכל פסוק נשמרות בנפרד. לחץ על "שמור הערות" כאשר סיימת לערוך.</span>
        </p>
      </div>

      <div class="prose prose-blue dark:prose-invert max-w-none mb-6">
        <div class="flex justify-between items-center mb-2">
          <h4 class="text-lg font-semibold">
            <span class="english-ui">General Notes</span>
            <span class="hebrew-ui hidden">{hebrewTranslations['General Notes'] || 'הערות כלליות'}</span>
          </h4>
          <div class="flex space-x-2">
            <button 
              id="general-note-save-btn"
              class="px-3 py-1 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 transition">
              <span class="english-ui">Save</span>
              <span class="hebrew-ui hidden">{hebrewTranslations['Save'] || 'שמור'}</span>
            </button>
          </div>
        </div>
        
        <textarea 
          id="general-note-textarea" 
          class="w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white mb-4" 
          rows="5"
          placeholder="Add your general notes for this day...">{notes}</textarea>
      </div>
    </div>
    
    <!-- Images section -->
    <div class="mt-10">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Images</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Images']}</span>
        </h3>
        
        <!-- Image upload button -->
        <label for="image-upload" class="cursor-pointer px-4 py-2 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700 transition">
          <span class="english-ui">Upload Image</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Upload Image'] || 'העלאת תמונה'}</span>
        </label>
        <input type="file" id="image-upload" accept="image/*" class="hidden" />
      </div>
      
      <!-- Drag and drop area -->
      <div id="drag-drop-area" class="border-2 border-dashed dark:border-gray-600 rounded-lg p-6 mb-6 text-center transition-colors duration-200 ease-in-out">
        <div class="flex flex-col items-center justify-center space-y-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p class="text-gray-500 dark:text-gray-400">
            <span class="english-ui">Drag and drop images here</span>
            <span class="hebrew-ui hidden">{hebrewTranslations['Drag and drop images here']}</span>
          </p>
          <p class="text-gray-400 dark:text-gray-500 text-sm">
            <span class="english-ui">or click Upload Image to browse files</span>
            <span class="hebrew-ui hidden">או לחץ על העלאת תמונה לחיפוש קבצים</span>
          </p>
        </div>
      </div>
      
      <!-- Upload progress -->
      <div id="upload-progress" class="hidden mb-4">
        <div class="relative pt-1">
          <div class="flex mb-2 items-center justify-between">
            <div>
              <span id="upload-status" class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200">
                Uploading...  
              </span>
            </div>
            <div class="text-right">
              <span id="upload-percentage" class="text-xs font-semibold inline-block text-blue-600">
                0%
              </span>
            </div>
          </div>
          <div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200">
            <div id="upload-progress-bar" style="width:0%" class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
          </div>
        </div>
      </div>
      
      {images && images.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {images.map((image) => {
            // Check if it's a URL or a file path
            const trimmedImage = image.trim();
            let imageSrc;
            
            // Handle various image path formats
            if (trimmedImage.startsWith('http') || trimmedImage.startsWith('//')) {
              // Full URL - leave as is
              imageSrc = trimmedImage;
            } else if (trimmedImage.startsWith('/images/aviya/')) {
              // Already has the correct path prefix
              imageSrc = trimmedImage;
            } else if (trimmedImage.includes('images/aviya/')) {
              // Path with 'images/aviya/' but missing leading slash
              imageSrc = '/' + trimmedImage;
            } else {
              // Just the filename - add full path
              imageSrc = `/images/aviya/${trimmedImage}`;
            }
            
            console.log('Processing image source:', trimmedImage, '→', imageSrc); // Debug log image source
            
            return (
              <div class="border dark:border-gray-700 rounded-lg overflow-hidden relative group">
                <img 
                  src={imageSrc} 
                  alt={`Study image for ${formattedDate}`} 
                  class="w-full h-auto object-cover max-h-96"
                  loading="lazy" 
                  onload="console.log('Image loaded successfully:', this.src); this.style.opacity = 1;"
                  onerror="console.error('Failed to load image:', this.src); this.src=(window.location.origin + '/images/placeholder-image.jpg'); console.log('Using fallback image:', window.location.origin + '/images/placeholder-image.jpg');"
                  style="opacity: 0.6; transition: opacity 0.3s ease;"
                  data-image-path={trimmedImage}
                />
                {/* Delete button - hidden by default, visible on hover */}
                <button 
                  class="delete-image-btn absolute top-2 right-2 bg-red-600 text-white rounded-full w-8 h-8 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200 shadow-md" 
                  title="Delete image"
                  data-image-path={trimmedImage}
                  onclick="deleteImage(event, '${dateParam}', '${trimmedImage}')"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            );
          })}
        </div>
      ) : (
        <div class="bg-gray-100 dark:bg-gray-800 border border-dashed dark:border-gray-700 rounded-lg p-10 text-center">
          <p class="text-gray-500 dark:text-gray-400">
            <span class="english-ui">No images available for this day</span>
            <span class="hebrew-ui hidden">אין תמונות זמינות ליום זה</span>
          </p>
        </div>
      )}
    </div>
  </div>
</Layout>

<style>
  /* Add any custom styles here */
  .font-serif {
    font-family: 'Times New Roman', serif;
  }
  
  /* Language toggle states */
  .hebrew-only .english-text {
    display: none;
  }
  
  .english-only .hebrew-text {
    display: none;
  }
  
  .lang-toggle.active {
    background-color: #2563eb; /* bg-blue-600 */
    color: white;
  }
  
  .dark .lang-toggle.active {
    background-color: #3b82f6; /* dark:bg-blue-500 */
  }
  
  /* For Hebrew UI, ensure proper direction */
  .hebrew-ui-active {
    direction: rtl;
  }
  
  /* Hidden elements */
  .hidden {
    display: none;
  }
</style>

<script>
  // This is the main function that sets up all the interactive parts of the page.
  // It's designed to be re-run every time you navigate to a new date page.
  function initializePage() {
    console.log('Initializing page for:', window.location.pathname);

    // --- 1. DEFINE ALL CONSTANTS & SELECTORS ---
    const textContainer = document.querySelector('.grid.gap-8');
    const englishElements = document.querySelectorAll('.english-ui');
    const hebrewElements = document.querySelectorAll('.hebrew-ui');
    const currentDateParam = window.location.pathname.split('/').pop();

    // Guard clause: If a core element isn't on the page, stop.
    if (!textContainer) {
      console.log("Required elements not found. Exiting initialization.");
      return;
    }

    // --- 2. DEFINE ALL HELPER FUNCTIONS ---

    // Fetches text content from the Sefaria API with a retry mechanism.
    async function fetchSefariaTexts(attemptCount = 1) {
      console.log(`Attempting to fetch Sefaria texts (attempt ${attemptCount})...`);
      try {
        const containers = document.querySelectorAll('div[class*="border dark:border-gray-700 rounded-lg"]');
        const readingElements = document.querySelectorAll('ul li strong .english-ui');

        if ((containers.length === 0 || readingElements.length === 0) && attemptCount < 5) {
          console.log('Content not ready, retrying in 500ms...');
          setTimeout(() => fetchSefariaTexts(attemptCount + 1), 500);
          return;
        }

        const readings = Array.from(readingElements).map(el => el.textContent.trim()).filter(Boolean);
        const fetchPromises = readings.map(async (reference) => {
          try {
            const response = await fetch(`https://www.sefaria.org/api/texts/${reference}?context=0`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return { reference, data: await response.json() };
          } catch (error) {
            console.error(`Error fetching ${reference}:`, error);
            return { reference, data: { he: "שגיאה בטעינת הטקסט", text: "Error loading text" } };
          }
        });

        const results = await Promise.all(fetchPromises);
        console.log(`Successfully retrieved ${results.length} texts from Sefaria.`);

        containers.forEach(container => {
          const titleEl = container.querySelector('h4 .english-ui');
          if (!titleEl) return;
          const reference = titleEl.textContent.trim();
          const result = results.find(r => r.reference === reference);
          if (result) {
            const hebrewTextDiv = container.querySelector('.hebrew-text');
            const englishTextDiv = container.querySelector('.english-text');
            if (hebrewTextDiv && result.data.he) hebrewTextDiv.innerHTML = result.data.he;
            if (englishTextDiv && result.data.text) englishTextDiv.innerHTML = result.data.text;
          }
        });
      } catch (error) {
        console.error('General error fetching Sefaria texts:', error);
      }
    }

    // Loads general and verse-specific notes from your API.
    async function loadVerseNotes() {
      try {
        console.log('Loading verse notes for date:', currentDateParam);
        const response = await fetch(`/api/load-verse-notes?date=${currentDateParam}`);
        
        if (!response.ok) throw new Error(`Failed to load notes: ${response.statusText}`);
        
        const data = await response.json();
        console.log('Loaded note data:', data);
        
        // Store verse notes in a global variable for later use
        window.currentVerseNotesData = data.verseNotes || {};
        console.log('Stored verse notes in window.currentVerseNotesData:', window.currentVerseNotesData);

        // Handle general notes
        const generalNotesTextarea = document.getElementById('general-note-textarea');
        if (generalNotesTextarea && data.notes) {
          console.log('Setting general notes:', data.notes);
          generalNotesTextarea.value = data.notes;
        }

        // Process verse-specific notes
        if (data.verseNotes && typeof data.verseNotes === 'object') {
          console.log('Found verse notes to display:', Object.keys(data.verseNotes).length);
          
          Object.entries(data.verseNotes).forEach(([reference, note]) => {
            console.log(`Looking for textarea for reference: '${reference}'`);
            // Try different selector approaches to find the textarea
            let textarea = document.querySelector(`.verse-note[data-reference="${reference}"]`);
            
            if (!textarea) {
              // Try escaping special characters in the reference
              const escapedReference = reference.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
              textarea = document.querySelector(`.verse-note[data-reference="${escapedReference}"]`);
            }
            
            if (textarea) {
              console.log(`Found textarea for ${reference}, setting value:`, note);
              textarea.value = note;
            } else {
              console.warn(`Could not find textarea for reference: '${reference}'`);
              // List all available textareas for debugging
              const allTextareas = document.querySelectorAll('.verse-note');
              console.log('Available verse textareas:', Array.from(allTextareas).map(t => t.dataset.reference));
            }
          });
        } else {
          console.warn('No verse notes found in the response or invalid format:', data.verseNotes);
        }
        
        console.log('All notes loading complete.');
      } catch (error) {
        console.error('Error loading verse notes:', error);
      }
    }
    
    // Sets up drag-and-drop and file input for image uploads.
    function setupImageUpload() {
      const dragDropArea = document.getElementById('drag-drop-area');
      const fileInput = document.getElementById('image-upload');
      const uploadProgress = document.getElementById('upload-progress');
      const uploadProgressBar = document.getElementById('upload-progress-bar');
      const uploadPercentage = document.getElementById('upload-percentage');
      const uploadStatus = document.getElementById('upload-status');
      if (!dragDropArea || !fileInput) return;

      const preventDefaults = (e) => { e.preventDefault(); e.stopPropagation(); };
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dragDropArea.addEventListener(eventName, preventDefaults, false);
      });

      const highlight = () => dragDropArea.classList.add('bg-blue-50', 'dark:bg-blue-900/20', 'border-blue-300', 'dark:border-blue-700');
      const unhighlight = () => dragDropArea.classList.remove('bg-blue-50', 'dark:bg-blue-900/20', 'border-blue-300', 'dark:border-blue-700');
      ['dragenter', 'dragover'].forEach(eventName => dragDropArea.addEventListener(eventName, highlight, false));
      ['dragleave', 'drop'].forEach(eventName => dragDropArea.addEventListener(eventName, unhighlight, false));

      const handleDrop = (e) => {
        const files = e.dataTransfer.files;
        if (files.length > 0) uploadImage(files[0]);
      };
      dragDropArea.addEventListener('drop', handleDrop, false);

      fileInput.addEventListener('change', function() {
        if (this.files && this.files[0]) uploadImage(this.files[0]);
      });

      function uploadImage(file) {
        if (!file.type.startsWith('image/')) {
          alert('Please select an image file.');
          return;
        }
        uploadProgress.classList.remove('hidden');
        uploadStatus.textContent = 'Uploading...';
        uploadProgressBar.style.width = '0%';
        uploadPercentage.textContent = '0%';

        const formData = new FormData();
        formData.append('image', file);
        formData.append('date', currentDateParam);
        
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/api/upload-image', true);

        xhr.upload.addEventListener('progress', (e) => {
          if (e.lengthComputable) {
            const percentComplete = Math.round((e.loaded / e.total) * 100);
            uploadProgressBar.style.width = percentComplete + '%';
            uploadPercentage.textContent = percentComplete + '%';
          }
        });

        xhr.onload = function() {
          if (xhr.status === 200) {
            uploadStatus.textContent = 'Upload Complete';
            setTimeout(() => location.reload(), 1500);
          } else {
            uploadStatus.textContent = 'Upload Failed';
            uploadStatus.classList.replace('text-blue-600', 'text-red-600');
            uploadStatus.classList.replace('bg-blue-200', 'bg-red-200');
          }
        };

        xhr.onerror = function() {
          uploadStatus.textContent = 'Upload Error';
          uploadStatus.classList.replace('text-blue-600', 'text-red-600');
          uploadStatus.classList.replace('bg-blue-200', 'bg-red-200');
        };

        xhr.send(formData);
      }
      console.log('Image upload handlers are set up.');
    }

    // Sets up all button clicks and interactions.
    function addAllEventListeners() {
      // Language toggle for text content
      const langButtons = document.querySelectorAll('.lang-toggle');
      langButtons.forEach(button => {
        button.addEventListener('click', () => {
          langButtons.forEach(btn => {
            btn.classList.remove('active', 'bg-blue-600', 'text-white');
            btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-black', 'dark:text-white');
          });
          button.classList.add('active', 'bg-blue-600', 'text-white');
          button.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-black', 'dark:text-white');

          textContainer.classList.remove('hebrew-only', 'english-only');
          if (button.id === 'hebrewOnly') textContainer.classList.add('hebrew-only');
          else if (button.id === 'englishOnly') textContainer.classList.add('english-only');
        });
      });

      // Site-wide UI language toggle
      const siteLanguageToggle = document.getElementById('siteLanguageToggle');
      if (siteLanguageToggle) {
        const applyLanguage = (lang) => {
          if (lang === 'hebrew') {
            document.body.classList.add('hebrew-ui-active');
            englishElements.forEach(el => el.classList.add('hidden'));
            hebrewElements.forEach(el => el.classList.remove('hidden'));
            document.documentElement.dir = 'rtl';
          } else {
            document.body.classList.remove('hebrew-ui-active');
            englishElements.forEach(el => el.classList.remove('hidden'));
            hebrewElements.forEach(el => el.classList.add('hidden'));
            document.documentElement.dir = 'ltr';
          }
        };

        applyLanguage(localStorage.getItem('aviyaUiLanguage')); // Apply on load
        
        siteLanguageToggle.addEventListener('click', () => {
          const newLang = document.body.classList.contains('hebrew-ui-active') ? 'english' : 'hebrew';
          localStorage.setItem('aviyaUiLanguage', newLang);
          applyLanguage(newLang);
        });
      }

      // General Notes "Save" button
      const generalNoteSaveBtn = document.getElementById('general-note-save-btn');
      if (generalNoteSaveBtn) {
        generalNoteSaveBtn.addEventListener('click', async () => {
          const generalNotesTextarea = document.getElementById('general-note-textarea');
          const originalText = generalNoteSaveBtn.innerHTML;
          try {
            await fetch('/api/save-verse-notes', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                date: currentDateParam,
                notes: generalNotesTextarea?.value || '',
                verseNotes: window.currentVerseNotesData || {}
              }),
            });
            generalNoteSaveBtn.innerHTML = '<span class="english-ui">✓ Saved</span><span class="hebrew-ui hidden">✓ נשמר</span>';
            setTimeout(() => { generalNoteSaveBtn.innerHTML = originalText; }, 2000);
          } catch (error) {
            console.error('Error saving general notes:', error);
            alert('Error saving general notes');
          }
        });
      }

      // Individual verse "Save" button
      document.querySelectorAll('.verse-save-btn').forEach(saveBtn => {
        saveBtn.addEventListener('click', async (event) => {
          const reference = event.target.closest('.verse-save-btn').dataset.reference;
          const textarea = document.querySelector(`.verse-note[data-reference="${reference}"]`);
          if (!textarea) return;
          
          const originalButtonText = saveBtn.innerHTML;
          saveBtn.disabled = true;
          if (saveBtn.querySelector('.english-ui')) saveBtn.querySelector('.english-ui').textContent = 'Saving...';
          
          try {
            console.log(`Saving note for ${reference}: ${textarea.value}`);
            const noteText = textarea.value.trim();
            
            // Prepare payload with all existing verse notes plus this one
            const payload = {
              date: currentDateParam,
              verseNotes: {
                ...window.currentVerseNotesData || {},
                [reference]: noteText
              },
              notes: document.getElementById('general-note-textarea')?.value || ''
            };
            
            console.log('Saving payload:', JSON.stringify(payload));
            
            // Send the updated notes to the API
            console.log('Sending save request to API (V2)...');
            const response = await fetch('/api/save-verse-notes-v2', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });
            
            const responseText = await response.text(); // Get raw response text first
            console.log(`API Response (${response.status}):`, responseText);
            
            let data;
            try {
              // Try to parse as JSON
              data = JSON.parse(responseText);
              console.log('Parsed response data:', data);
              
              if (!response.ok) {
                throw new Error(data.message || data.error || `Failed with status ${response.status}`);
              }
            } catch (parseError) {
              console.error('Error parsing response:', parseError);
              throw new Error(`Failed to save note (Status: ${response.status})`);
            }
            
            // Update the current data in browser memory
            window.currentVerseNotesData = payload.verseNotes;
            
            if (saveBtn.querySelector('.english-ui')) saveBtn.querySelector('.english-ui').textContent = 'Saved!';
            saveBtn.classList.replace('bg-green-600', 'bg-blue-600');
            
            // Reset button state after 2 seconds
            setTimeout(() => {
              // Restore original button text and styling
              if (saveBtn.querySelector('.english-ui')) {
                saveBtn.querySelector('.english-ui').textContent = 'Save';
              } else {
                saveBtn.innerHTML = originalButtonText;
              }
              saveBtn.disabled = false;
              saveBtn.classList.replace('bg-blue-600', 'bg-green-600');
            }, 2000);
          } catch (error) {
            console.error('Error saving verse note:', error);
            if (saveBtn.querySelector('.english-ui')) saveBtn.querySelector('.english-ui').textContent = 'Error!';
            saveBtn.classList.replace('bg-green-600', 'bg-red-600');
            setTimeout(() => {
              saveBtn.innerHTML = originalButtonText;
              saveBtn.disabled = false;
              saveBtn.classList.replace('bg-red-600', 'bg-green-600');
            }, 2000);
          }
        });
      });
      
      // Individual verse "Delete" button
      document.querySelectorAll('.verse-delete-btn').forEach(deleteBtn => {
        deleteBtn.addEventListener('click', async (event) => {
          const reference = event.target.closest('.verse-delete-btn').dataset.reference;
          const textarea = document.querySelector(`.verse-note[data-reference="${reference}"]`);
          if (!textarea) return;
          
          const originalButtonText = deleteBtn.innerHTML;
          deleteBtn.disabled = true;
          if (deleteBtn.querySelector('.english-ui')) deleteBtn.querySelector('.english-ui').textContent = 'Deleting...';
          
          try {
            const verseNotes = window.currentVerseNotesData || {};
            delete verseNotes[reference];
            textarea.value = '';

            // Call the dedicated delete endpoint instead of using the save endpoint
            const response = await fetch('/api/delete-verse-notes-v2', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ date: currentDateParam, reference: reference })
            });
            if (!response.ok) throw new Error('Failed to delete note');
            
            window.currentVerseNotesData = verseNotes;
            if (deleteBtn.querySelector('.english-ui')) deleteBtn.querySelector('.english-ui').textContent = 'Deleted!';
            deleteBtn.classList.replace('bg-red-600', 'bg-blue-600');

            // Reset button state after 2 seconds
            setTimeout(() => {
              // Restore original button text and styling
              if (deleteBtn.querySelector('.english-ui')) {
                deleteBtn.querySelector('.english-ui').textContent = 'Delete';
              } else {
                deleteBtn.innerHTML = originalButtonText;
              }
              deleteBtn.disabled = false;
              deleteBtn.classList.replace('bg-blue-600', 'bg-red-600');
            }, 2000);
          } catch (error) {
            console.error('Error deleting verse note:', error);
            if (deleteBtn.querySelector('.english-ui')) deleteBtn.querySelector('.english-ui').textContent = 'Error!';
            deleteBtn.classList.replace('bg-red-600', 'bg-yellow-600');
             
            // Reset button after error
            setTimeout(() => {
              // Restore original button text and styling
              if (deleteBtn.querySelector('.english-ui')) {
                deleteBtn.querySelector('.english-ui').textContent = 'Delete';
              } else {
                deleteBtn.innerHTML = originalButtonText;
              }
              deleteBtn.disabled = false;
              deleteBtn.classList.replace('bg-yellow-600', 'bg-red-600');
            }, 2000);
          }
        });
      });
      console.log('All event listeners are set up.');
    }

    // --- 3. EXECUTE INITIALIZATION LOGIC ---
    addAllEventListeners();
    setupImageUpload();

    // Asynchronously load dynamic content
    (async () => {
      await loadVerseNotes();
      await fetchSefariaTexts();
    })();
    
    // Define deleteImage in the global scope so it can be called from the onclick attribute
    window.deleteImage = async function(event, date, imagePath) {
      event.preventDefault();
      if (!confirm('Are you sure you want to delete this image?')) {
        return;
      }
      
      const imageElement = event.target.closest('.delete-image-btn');
      const imageContainer = imageElement.closest('.relative');
      imageContainer.classList.add('opacity-50');
      imageElement.disabled = true;
      
      try {
        const response = await fetch('/api/delete-image', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ date, imagePath })
        });
        
        if (!response.ok) {
          throw new Error('Failed to delete image');
        }
        
        const result = await response.json();
        if (result.success) {
          // Fade out and remove the image container
          imageContainer.style.transition = 'opacity 0.5s, transform 0.5s';
          imageContainer.style.opacity = '0';
          imageContainer.style.transform = 'scale(0.9)';
          
          setTimeout(() => {
            imageContainer.remove();
            
            // If no images left, show the 'no images' message
            const imageGrid = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2');
            if (imageGrid && imageGrid.children.length === 0) {
              const noImagesDiv = document.createElement('div');
              noImagesDiv.className = 'bg-gray-100 dark:bg-gray-800 border border-dashed dark:border-gray-700 rounded-lg p-10 text-center col-span-2';
              noImagesDiv.innerHTML = `
                <p class="text-gray-500 dark:text-gray-400">
                  <span class="english-ui">No images available for this day</span>
                  <span class="hebrew-ui hidden">אין תמונות זמינות ליום זה</span>
                </p>
              `;
              imageGrid.parentNode.replaceChild(noImagesDiv, imageGrid);
            }
          }, 500);
          
          console.log('Image deleted successfully');
        } else {
          throw new Error(result.error || 'Unknown error');
        }
      } catch (error) {
        console.error('Error deleting image:', error);
        alert('Failed to delete image: ' + error.message);
        imageContainer.classList.remove('opacity-50');
        imageElement.disabled = false;
      }
    };
    
  } // --- END of initializePage ---

  // --- 4. ATTACH TO PAGE LOAD EVENTS ---
  document.addEventListener('DOMContentLoaded', initializePage);
  document.addEventListener('astro:page-load', initializePage);
  
  // Make the deleteImage function available globally
  if (typeof window !== 'undefined') {
    window.deleteImage = window.deleteImage || function(){console.error('deleteImage not initialized');};
  }
</script>