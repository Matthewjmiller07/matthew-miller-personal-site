---
import Layout from '../../layouts/Layout.astro';
import { parse } from 'csv-parse/sync';
import fs from 'fs';
import path from 'path';
import { format } from 'date-fns';

// Hebrew translations for UI elements
const hebrewTranslations = {
  // Days of week
  'Sunday': 'יום ראשון',
  'Monday': 'יום שני',
  'Tuesday': 'יום שלישי',
  'Wednesday': 'יום רביעי',
  'Thursday': 'יום חמישי',
  'Friday': 'יום שישי',
  'Saturday': 'יום שבת',
  
  // Book names - Genesis, etc.
  'Genesis': 'בראשית',
  'Exodus': 'שמות',
  'Leviticus': 'ויקרא',
  'Numbers': 'במדבר',
  'Deuteronomy': 'דברים',
  
  // UI elements
  'Back to Schedule': 'חזרה ללוח',
  'First Day': 'יום ראשון',
  'Previous Day': 'יום קודם',
  'Next Day': 'יום הבא',
  'Last Day': 'יום אחרון',
  "Today's Readings": 'קריאות היום',
  'Text Content': 'תוכן הטקסט',
  'Notes': 'הערות',
  'Add your notes here...': 'הוסף את ההערות שלך כאן...',
  'Images': 'תמונות',
  'Drag and drop images here': 'גרור ושחרר תמונות כאן',
  'or': 'או',
  'Select Images': 'בחר תמונות',
  'Both': 'שניהם',
  'Hebrew Only': 'עברית בלבד',
  'English Only': 'אנגלית בלבד'
};

// Function to translate Bible references to Hebrew
function translateReferenceToHebrew(reference) {
  const bookMap = {
    'Genesis': 'בראשית',
    'Exodus': 'שמות',
    'Leviticus': 'ויקרא',
    'Numbers': 'במדבר',
    'Deuteronomy': 'דברים'
  };
  
  let hebrewReference = reference;
  Object.entries(bookMap).forEach(([english, hebrew]) => {
    if (reference.includes(english)) {
      hebrewReference = reference.replace(english, hebrew);
    }
  });
  
  return hebrewReference;
}

// Get the date parameter from URL
const { date: dateParam } = Astro.params;

// Read the CSV data
const csvFilePath = path.join(process.cwd(), 'public', 'aviya.csv');
let record;
let readings = [];
let prevDate = null;
let nextDate = null;
let dayOfWeek = '';
let notes = '';
let images = [];
let date = new Date();
let formattedDate = format(date, 'MMMM d, yyyy');
let texts = [];

try {
  // Read the CSV file
  const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
  const records = parse(csvContent, {
    columns: true,
    skip_empty_lines: true
  });
  
  // Find the record that matches our date
  const currentIndex = records.findIndex(r => format(new Date(r.Date), 'yyyy-MM-dd') === dateParam);
  
  if (currentIndex >= 0) {
    record = records[currentIndex];
    readings = record.Reading.split(', ');
    dayOfWeek = record["Day of Week"];
    notes = record.Notes || '';
    
    // Parse images if available
    if (record.Images) {
      try {
        // Handle both comma-separated lists and JSON arrays
        if (record.Images.startsWith('[')) {
          images = JSON.parse(record.Images);
        } else {
          // Just use the raw image URL/path if it's a single entry
          if (record.Images.includes(',')) {
            images = record.Images.split(',').map(img => img.trim());
          } else {
            images = [record.Images.trim()];
          }
        }
      } catch (error) {
        console.error('Error parsing images:', error);
        images = [];
      }
    }
    
    // Get previous and next dates for navigation
    if (currentIndex > 0) {
      prevDate = format(new Date(records[currentIndex - 1].Date), 'yyyy-MM-dd');
    }
    
    if (currentIndex < records.length - 1) {
      nextDate = format(new Date(records[currentIndex + 1].Date), 'yyyy-MM-dd');
    }
    
    date = new Date(record.Date);
    formattedDate = format(date, 'MMMM d, yyyy');
    
    // Function to fetch text from Sefaria API
    async function fetchSefariaText(reference) {
      try {
        const response = await fetch(`https://www.sefaria.org/api/texts/${reference}?context=0`);
        const data = await response.json();
        return data;
      } catch (error) {
        console.error(`Error fetching ${reference}:`, error);
        return { he: "Error loading text", text: "Error loading text" };
      }
    }
    
    // Fetch all texts for this day
    const textPromises = readings.map(reference => fetchSefariaText(reference));
    texts = await Promise.all(textPromises);
  }
} catch (error) {
  console.error('Error reading or parsing CSV:', error);
}
---

<Layout title={`Aviya Schedule - ${formattedDate}`}>
  <div class="container mx-auto px-4 py-8 text-black dark:text-white">
    <div class="mb-8 flex justify-between items-center">
      <a href="/aviya-schedule" class="text-blue-600 dark:text-blue-400 hover:underline">
        <span class="english-ui">&larr; Back to Schedule</span>
        <span class="hebrew-ui hidden">{hebrewTranslations['Back to Schedule']} &rarr;</span>
      </a>
      
      <button id="siteLanguageToggle" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm">
        <span class="english-ui">עברית</span>
        <span class="hebrew-ui hidden">English</span>
      </button>
    </div>
    
    <h1 class="text-3xl font-bold mb-2">{formattedDate}</h1>
    <h2 class="text-xl mb-6">
      <span class="english-ui">{dayOfWeek}</span>
      <span class="hebrew-ui hidden">{hebrewTranslations[dayOfWeek] || dayOfWeek}</span>
    </h2>
    
    <!-- Navigation between days -->
    <div class="flex justify-between mb-8">
      {prevDate ? (
        <a href={`/aviya-schedule/${prevDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          <span class="english-ui">&larr; Previous Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Previous Day']} &rarr;</span>
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">
          <span class="english-ui">First Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['First Day']}</span>
        </span>
      )}
      
      {nextDate ? (
        <a href={`/aviya-schedule/${nextDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          <span class="english-ui">Next Day &rarr;</span>
          <span class="hebrew-ui hidden">&larr; {hebrewTranslations['Next Day']}</span>
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">
          <span class="english-ui">Last Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Last Day']}</span>
        </span>
      )}
    </div>
    
    <!-- Daily readings -->
    <div class="mb-10">
      <h3 class="text-2xl font-semibold mb-4">
        <span class="english-ui">Today's Readings</span>
        <span class="hebrew-ui hidden">{hebrewTranslations["Today's Readings"]}</span>
      </h3>
      <ul>
        {readings.map((reference, index) => (
          <li class="mb-2">
            <strong class="text-lg">
              <span class="english-ui">{reference}</span>
              <span class="hebrew-ui hidden">{translateReferenceToHebrew(reference)}</span>
            </strong>
          </li>
        ))}
      </ul>
    </div>
    
    <!-- Text content from Sefaria -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Text Content</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Text Content']}</span>
        </h3>
        
        <div class="flex space-x-2 english-ui">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">Both</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">Hebrew Only</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">English Only</button>
        </div>
        
        <div class="flex space-x-2 hebrew-ui hidden">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">{hebrewTranslations['Both']}</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">{hebrewTranslations['Hebrew Only']}</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">{hebrewTranslations['English Only']}</button>
        </div>
      </div>
      
      <div class="grid gap-8">
        {readings.map((reference, index) => {
          const textData = texts[index];
          return (
            <div class="border dark:border-gray-700 rounded-lg p-6 bg-gray-50 dark:bg-gray-800">
              <h4 class="text-xl font-semibold mb-3">
                <span class="english-ui">{reference}</span>
                <span class="hebrew-ui hidden">{translateReferenceToHebrew(reference)}</span>
              </h4>
              
              <div class="grid md:grid-cols-2 gap-6">
                <!-- Hebrew text -->
                <div dir="rtl" lang="he" class="font-serif text-lg leading-relaxed hebrew-text">
                  <Fragment set:html={textData?.he || "Loading Hebrew text..."} />
                </div>
                
                <!-- English text -->
                <div class="font-serif text-lg leading-relaxed english-text">
                  <Fragment set:html={textData?.text || "Loading English text..."} />
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
    
    <!-- Notes section -->
    <div class="mt-10 border-t pt-6">
      <h3 class="text-2xl font-semibold mb-4">
        <span class="english-ui">Notes</span>
        <span class="hebrew-ui hidden">{hebrewTranslations['Notes']}</span>
      </h3>
      <div class="bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg p-6 min-h-[150px]">
        {notes ? (
          <div class="prose dark:prose-invert max-w-none" set:html={notes}></div>
        ) : (
          <p class="text-gray-400 dark:text-gray-500 italic">
            <span class="english-ui">Add your notes here...</span>
            <span class="hebrew-ui hidden">{hebrewTranslations['Add your notes here...']}</span>
          </p>
        )}
      </div>
    </div>
    
    <!-- Images section -->
    <div class="mt-10">
      <h3 class="text-2xl font-semibold mb-4">
        <span class="english-ui">Images</span>
        <span class="hebrew-ui hidden">{hebrewTranslations['Images']}</span>
      </h3>
      
      {images && images.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {images.map((image) => {
            // Check if it's a URL or a file path
            const isFullUrl = image.trim().startsWith('http') || image.trim().startsWith('//');
            const imageSrc = isFullUrl ? image.trim() : `/images/aviya/${image.trim()}`;
            
            return (
              <div class="border dark:border-gray-700 rounded-lg overflow-hidden">
                <img 
                  src={imageSrc} 
                  alt="Study image" 
                  class="w-full h-auto object-cover"
                  loading="lazy" 
                />
              </div>
            );
          })}
        </div>
      ) : (
        <div class="bg-gray-100 dark:bg-gray-800 border border-dashed dark:border-gray-700 rounded-lg p-10 text-center">
          <p class="text-gray-500 dark:text-gray-400">
            <span class="english-ui">No images available for this day</span>
            <span class="hebrew-ui hidden">אין תמונות זמינות ליום זה</span>
          </p>
        </div>
      )}
    </div>
  </div>
</Layout>

<style>
  /* Add any custom styles here */
  .font-serif {
    font-family: 'Times New Roman', serif;
  }
  
  /* Language toggle states */
  .hebrew-only .english-text {
    display: none;
  }
  
  .english-only .hebrew-text {
    display: none;
  }
  
  .lang-toggle.active {
    background-color: #2563eb; /* bg-blue-600 */
    color: white;
  }
  
  .dark .lang-toggle.active {
    background-color: #3b82f6; /* dark:bg-blue-500 */
  }
  
  /* For Hebrew UI, ensure proper direction */
  .hebrew-ui-active {
    direction: rtl;
  }
  
  /* Hidden elements */
  .hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const textContainer = document.querySelector('.grid.gap-8');
    const langButtons = document.querySelectorAll('.lang-toggle');
    const siteLanguageToggle = document.getElementById('siteLanguageToggle');
    const englishElements = document.querySelectorAll('.english-ui');
    const hebrewElements = document.querySelectorAll('.hebrew-ui');
    
    // Language toggle functionality
    langButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        langButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        button.classList.add('active');
        
        // Reset container classes
        textContainer.classList.remove('hebrew-only', 'english-only', 'both-langs');
        
        // Set appropriate class based on button ID
        if (button.id === 'hebrewOnly') {
          textContainer.classList.add('hebrew-only');
        } else if (button.id === 'englishOnly') {
          textContainer.classList.add('english-only');
        }
        
        // Update button styles
        langButtons.forEach(btn => {
          if (btn.classList.contains('active')) {
            btn.classList.remove('bg-gray-200', 'dark:bg-gray-700');
            btn.classList.add('bg-blue-600', 'text-white');
          } else {
            btn.classList.remove('bg-blue-600', 'text-white');
            btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-black', 'dark:text-white');
          }
        });
      });
    });
    
    // Site-wide language toggle (UI language)
    if (siteLanguageToggle) {
      // Check if there's a stored preference
      const savedLanguage = localStorage.getItem('aviyaUiLanguage');
      if (savedLanguage === 'hebrew') {
        document.body.classList.add('hebrew-ui-active');
        englishElements.forEach(el => el.classList.add('hidden'));
        hebrewElements.forEach(el => el.classList.remove('hidden'));
        document.documentElement.dir = 'rtl';
      }
      
      siteLanguageToggle.addEventListener('click', () => {
        document.body.classList.toggle('hebrew-ui-active');
        
        if (document.body.classList.contains('hebrew-ui-active')) {
          // Switch to Hebrew UI
          localStorage.setItem('aviyaUiLanguage', 'hebrew');
          englishElements.forEach(el => el.classList.add('hidden'));
          hebrewElements.forEach(el => el.classList.remove('hidden'));
          document.documentElement.dir = 'rtl';
        } else {
          // Switch to English UI
          localStorage.setItem('aviyaUiLanguage', 'english');
          englishElements.forEach(el => el.classList.remove('hidden'));
          hebrewElements.forEach(el => el.classList.add('hidden'));
          document.documentElement.dir = 'ltr';
        }
      });
    }
  });
</script>
