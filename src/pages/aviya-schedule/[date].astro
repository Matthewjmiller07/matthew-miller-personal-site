---
import Layout from '../../layouts/Layout.astro';
import { parse } from 'csv-parse/sync';
import fs from 'fs';
import path from 'path';
import { format } from 'date-fns';

// Get the date parameter from URL
const { date: dateParam } = Astro.params;

// Read the CSV data
const csvFilePath = path.join(process.cwd(), 'public', 'aviya.csv');
let record;
let readings = ["Genesis 1:1"];
let date = new Date();
let formattedDate = format(date, 'MMMM d, yyyy');
let dayOfWeek = "Unknown";
let texts = [];
let prevDate = null;
let nextDate = null;

try {
  const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
  const records = parse(csvContent, {
    columns: true,
    skip_empty_lines: true
  });
  
  // Find the record that matches the date parameter
  record = records.find(r => {
    try {
      const recordDate = new Date(r.Date);
      return format(recordDate, 'yyyy-MM-dd') === dateParam;
    } catch (e) {
      return false;
    }
  });
  
  if (record) {
    // Safely extract data from the record
    date = new Date(record.Date);
    formattedDate = format(date, 'MMMM d, yyyy');
    dayOfWeek = record['Day of Week'] || record.Day_of_Week || "Unknown";
    readings = record.Reading ? record.Reading.split(', ') : ["Genesis 1:1"];
    
    // Function to fetch text from Sefaria API
    async function fetchSefariaText(reference) {
      try {
        const response = await fetch(`https://www.sefaria.org/api/texts/${reference}?context=0`);
        const data = await response.json();
        return data;
      } catch (error) {
        console.error(`Error fetching ${reference}:`, error);
        return { he: "Error loading text", text: "Error loading text" };
      }
    }
    
    // Fetch all texts for this day
    const textPromises = readings.map(reference => fetchSefariaText(reference));
    texts = await Promise.all(textPromises);
    
    // Find previous and next dates
    const currentDateStr = dateParam;
    const currentIndex = records.findIndex(r => {
      try {
        return format(new Date(r.Date), 'yyyy-MM-dd') === currentDateStr;
      } catch (e) {
        return false;
      }
    });
    
    if (currentIndex !== -1) {
      const prevRecord = currentIndex > 0 ? records[currentIndex - 1] : null;
      const nextRecord = currentIndex < records.length - 1 ? records[currentIndex + 1] : null;
      
      prevDate = prevRecord ? format(new Date(prevRecord.Date), 'yyyy-MM-dd') : null;
      nextDate = nextRecord ? format(new Date(nextRecord.Date), 'yyyy-MM-dd') : null;
    }
  }
} catch (error) {
  console.error('Error reading or parsing CSV:', error);
}
---

<Layout title={`Aviya Schedule - ${formattedDate}`}>
  <div class="container mx-auto px-4 py-8 text-black dark:text-white">
    <div class="mb-8">
      <a href="/aviya-schedule" class="text-blue-600 dark:text-blue-400 hover:underline">&larr; Back to Schedule</a>
    </div>
    
    <h1 class="text-3xl font-bold mb-2">{formattedDate}</h1>
    <h2 class="text-xl mb-6">{dayOfWeek}</h2>
    
    <!-- Navigation between days -->
    <div class="flex justify-between mb-8">
      {prevDate ? (
        <a href={`/aviya-schedule/${prevDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          &larr; Previous Day
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">First Day</span>
      )}
      
      {nextDate ? (
        <a href={`/aviya-schedule/${nextDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          Next Day &rarr;
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">Last Day</span>
      )}
    </div>
    
    <!-- Daily readings -->
    <div class="mb-10">
      <h3 class="text-2xl font-semibold mb-4">Today's Readings</h3>
      <ul>
        {readings.map((reference, index) => (
          <li class="mb-2">
            <strong class="text-lg">{reference}</strong>
          </li>
        ))}
      </ul>
    </div>
    
    <!-- Text content from Sefaria -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-semibold">Text Content</h3>
        
        <div class="flex space-x-2">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">Both</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">Hebrew Only</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">English Only</button>
        </div>
      </div>
      
      <div class="grid gap-8">
        {readings.map((reference, index) => {
          const textData = texts[index];
          return (
            <div class="border dark:border-gray-700 rounded-lg p-6 bg-gray-50 dark:bg-gray-800">
              <h4 class="text-xl font-semibold mb-3">{reference}</h4>
              
              <div class="grid md:grid-cols-2 gap-6">
                <!-- Hebrew text -->
                <div dir="rtl" lang="he" class="font-serif text-lg leading-relaxed hebrew-text">
                  <Fragment set:html={textData?.he || "Loading Hebrew text..."} />
                </div>
                
                <!-- English text -->
                <div class="font-serif text-lg leading-relaxed english-text">
                  <Fragment set:html={textData?.text || "Loading English text..."} />
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
    
    <!-- Notes section -->
    <div class="mt-10 border-t pt-6">
      <h3 class="text-2xl font-semibold mb-4">Notes</h3>
      <div class="bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg p-6 min-h-[300px]">
        <p class="text-gray-400 dark:text-gray-500 italic">Add your notes here...</p>
        <!-- In a future iteration, this could be a rich text editor or form -->
      </div>
    </div>
    
    <!-- Image upload section -->
    <div class="mt-10">
      <h3 class="text-2xl font-semibold mb-4">Images</h3>
      <div class="bg-gray-100 dark:bg-gray-800 border border-dashed dark:border-gray-700 rounded-lg p-10 text-center">
        <p class="text-gray-500 dark:text-gray-400 mb-2">Drag and drop images here</p>
        <p class="text-gray-400 text-sm">or</p>
        <button class="mt-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600">
          Select Images
        </button>
        <!-- In a future iteration, this would be connected to image upload functionality -->
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Add any custom styles here */
  .font-serif {
    font-family: 'Times New Roman', serif;
  }
  
  /* Language toggle states */
  .hebrew-only .english-text {
    display: none;
  }
  
  .english-only .hebrew-text {
    display: none;
  }
  
  .lang-toggle.active {
    background-color: #2563eb; /* bg-blue-600 */
    color: white;
  }
  
  .dark .lang-toggle.active {
    background-color: #3b82f6; /* dark:bg-blue-500 */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const textContainer = document.querySelector('.grid.gap-8');
    const langButtons = document.querySelectorAll('.lang-toggle');
    
    // Language toggle functionality
    langButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        langButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        button.classList.add('active');
        
        // Reset container classes
        textContainer.classList.remove('hebrew-only', 'english-only', 'both-langs');
        
        // Set appropriate class based on button ID
        if (button.id === 'hebrewOnly') {
          textContainer.classList.add('hebrew-only');
        } else if (button.id === 'englishOnly') {
          textContainer.classList.add('english-only');
        }
        
        // Update button styles
        langButtons.forEach(btn => {
          if (btn.classList.contains('active')) {
            btn.classList.remove('bg-gray-200', 'dark:bg-gray-700');
            btn.classList.add('bg-blue-600', 'text-white');
          } else {
            btn.classList.remove('bg-blue-600', 'text-white');
            btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-black', 'dark:text-white');
          }
        });
      });
    });
  });
</script>
