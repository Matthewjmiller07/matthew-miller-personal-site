---
import Layout from '../../layouts/Layout.astro';
import { parse } from 'csv-parse/sync';
import fs from 'fs';
import path from 'path';
import { format } from 'date-fns';
// Do not use any async/await in the frontmatter section

// Hebrew translations for UI elements
const hebrewTranslations = {
  // Days of week
  'Sunday': 'יום ראשון',
  'Monday': 'יום שני',
  'Tuesday': 'יום שלישי',
  'Wednesday': 'יום רביעי',
  'Thursday': 'יום חמישי',
  'Friday': 'יום שישי',
  'Saturday': 'יום שבת',
  
  // Book names - Genesis, etc.
  'Genesis': 'בראשית',
  'Exodus': 'שמות',
  'Leviticus': 'ויקרא',
  'Numbers': 'במדבר',
  'Deuteronomy': 'דברים',
  
  // UI elements
  'Back to Schedule': 'חזרה ללוח',
  'First Day': 'יום ראשון',
  'Previous Day': 'יום קודם',
  'Next Day': 'יום הבא',
  'Last Day': 'יום אחרון',
  "Today's Readings": 'קריאות היום',
  'Text Content': 'תוכן הטקסט',
  'Notes': 'הערות',
  'Add your notes here...': 'הוסף את ההערות שלך כאן...',
  'Images': 'תמונות',
  'Drag and drop images here': 'גרור ושחרר תמונות כאן',
  'or': 'או',
  'Select Images': 'בחר תמונות',
  'Both': 'שניהם',
  'Hebrew Only': 'עברית בלבד',
  'English Only': 'אנגלית בלבד'
};

// Function to translate Bible references to Hebrew
function translateReferenceToHebrew(reference) {
  const bookMap = {
    'Genesis': 'בראשית',
    'Exodus': 'שמות',
    'Leviticus': 'ויקרא',
    'Numbers': 'במדבר',
    'Deuteronomy': 'דברים'
  };
  
  let hebrewReference = reference;
  Object.entries(bookMap).forEach(([english, hebrew]) => {
    if (reference.includes(english)) {
      hebrewReference = reference.replace(english, hebrew);
    }
  });
  
  return hebrewReference;
}

// Get the date parameter from URL
const { date: dateParam } = Astro.params;

// Read the CSV data
const csvFilePath = path.join(process.cwd(), 'public', 'aviya.csv');
let record;
let readings = [];
let prevDate = null;
let nextDate = null;
let dayOfWeek = '';
let notes = '';
let images = [];
let date = new Date();
let formattedDate = format(date, 'MMMM d, yyyy');
let texts = [];

try {
  // Read the CSV file (synchronously)
  const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
  const records = parse(csvContent, {
    columns: true,
    skip_empty_lines: true
  });
  
  // Find the record that matches our date
  const currentIndex = records.findIndex(r => format(new Date(r.Date), 'yyyy-MM-dd') === dateParam);
  
  if (currentIndex >= 0) {
    record = records[currentIndex];
    readings = record.Reading.split(', ');
    dayOfWeek = record["Day of Week"];
    notes = record.Notes || '';
    
    // Parse images if available
    if (record.Images) {
      console.log('Found Images data:', record.Images);
      try {
        // Try to parse as JSON first
        if (record.Images.startsWith('[')) {
          images = JSON.parse(record.Images);
          console.log('Parsed images as JSON array:', images);
        } else {
          // Otherwise, split by commas if present
          if (record.Images.includes(',')) {
            images = record.Images.split(',').map(img => img.trim());
            console.log('Split images by comma:', images);
          } else {
            images = [record.Images.trim()];
            console.log('Single image found:', images);
          }
        }
      } catch (error) {
        console.error('Error parsing images:', error);
        images = [];
      }
    }
    
    // Get previous and next dates for navigation
    if (currentIndex > 0) {
      prevDate = format(new Date(records[currentIndex - 1].Date), 'yyyy-MM-dd');
    }
    
    if (currentIndex < records.length - 1) {
      nextDate = format(new Date(records[currentIndex + 1].Date), 'yyyy-MM-dd');
    }
    
    date = new Date(record.Date);
    formattedDate = format(date, 'MMMM d, yyyy');
    
    // NOTE: We've moved the Sefaria API fetching to client-side JS
    // instead of server-side to avoid async issues in Astro frontmatter
  }
} catch (error) {
  console.error('Error reading or parsing CSV:', error);
}
---

<Layout title={`Aviya Schedule - ${formattedDate}`}>
  <div class="container mx-auto px-4 py-8 text-black dark:text-white">
    <div class="mb-8 flex justify-between items-center">
      <a href="/aviya-schedule" class="text-blue-600 dark:text-blue-400 hover:underline">
        <span class="english-ui">&larr; Back to Schedule</span>
        <span class="hebrew-ui hidden">{hebrewTranslations['Back to Schedule']} &rarr;</span>
      </a>
      
      <button id="siteLanguageToggle" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm">
        <span class="english-ui">עברית</span>
        <span class="hebrew-ui hidden">English</span>
      </button>
    </div>
    
    <h1 class="text-3xl font-bold mb-2">{formattedDate}</h1>
    <h2 class="text-xl mb-6">
      <span class="english-ui">{dayOfWeek}</span>
      <span class="hebrew-ui hidden">{hebrewTranslations[dayOfWeek] || dayOfWeek}</span>
    </h2>
    
    <!-- Navigation between days -->
    <div class="flex justify-between mb-8">
      {prevDate ? (
        <a href={`/aviya-schedule/${prevDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          <span class="english-ui">&larr; Previous Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Previous Day']} &rarr;</span>
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">
          <span class="english-ui">First Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['First Day']}</span>
        </span>
      )}
      
      {nextDate ? (
        <a href={`/aviya-schedule/${nextDate}`} class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">
          <span class="english-ui">Next Day &rarr;</span>
          <span class="hebrew-ui hidden">&larr; {hebrewTranslations['Next Day']}</span>
        </a>
      ) : (
        <span class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded opacity-50">
          <span class="english-ui">Last Day</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Last Day']}</span>
        </span>
      )}
    </div>
    
    <!-- Daily readings -->
    <div class="mb-10">
      <h3 class="text-2xl font-semibold mb-4">
        <span class="english-ui">Today's Readings</span>
        <span class="hebrew-ui hidden">{hebrewTranslations["Today's Readings"]}</span>
      </h3>
      <ul>
        {readings.map((reference, index) => (
          <li class="mb-2">
            <strong class="text-lg">
              <span class="english-ui">{reference}</span>
              <span class="hebrew-ui hidden">{translateReferenceToHebrew(reference)}</span>
            </strong>
          </li>
        ))}
      </ul>
    </div>
    
    <!-- Text content from Sefaria -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Text Content</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Text Content']}</span>
        </h3>
        
        <div class="flex space-x-2 english-ui">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">Both</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">Hebrew Only</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">English Only</button>
        </div>
        
        <div class="flex space-x-2 hebrew-ui hidden">
          <button id="bothLangs" class="px-3 py-1 rounded bg-blue-600 text-white text-sm lang-toggle active">{hebrewTranslations['Both']}</button>
          <button id="hebrewOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">{hebrewTranslations['Hebrew Only']}</button>
          <button id="englishOnly" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-black dark:text-white text-sm lang-toggle">{hebrewTranslations['English Only']}</button>
        </div>
      </div>
      
      <div class="grid gap-8">
        {readings.map((reference, index) => {
          const textData = texts[index];
          return (
            <div class="border dark:border-gray-700 rounded-lg p-6 bg-gray-50 dark:bg-gray-800">
              <h4 class="text-xl font-semibold mb-3">
                <span class="english-ui">{reference}</span>
                <span class="hebrew-ui hidden">{translateReferenceToHebrew(reference)}</span>
              </h4>
              
              <div class="grid md:grid-cols-2 gap-6">
                <!-- Hebrew text -->
                <div dir="rtl" lang="he" class="font-serif text-lg leading-relaxed hebrew-text">
                  <Fragment set:html={textData?.he || "Loading Hebrew text..."} />
                </div>
                
                <!-- English text -->
                <div class="font-serif text-lg leading-relaxed english-text">
                  <Fragment set:html={textData?.text || "Loading English text..."} />
                </div>
              </div>
              
              {/* Verse notes */}
              <div class="mt-6">
                <div class="flex justify-between items-center mb-2">
                  <h5 class="text-lg font-semibold">
                    <span class="english-ui">Verse Notes</span>
                    <span class="hebrew-ui hidden">{hebrewTranslations['Verse Notes'] || 'הערות לפסוק'}</span>
                  </h5>
                  <div class="flex space-x-2">
                    <button 
                      class="verse-save-btn px-3 py-1 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 transition"
                      data-reference={reference}>
                      <span class="english-ui">Save</span>
                      <span class="hebrew-ui hidden">{hebrewTranslations['Save'] || 'שמור'}</span>
                    </button>
                    <button 
                      class="verse-delete-btn px-3 py-1 text-sm rounded-md bg-red-600 text-white hover:bg-red-700 transition"
                      data-reference={reference}>
                      <span class="english-ui">Delete</span>
                      <span class="hebrew-ui hidden">{hebrewTranslations['Delete'] || 'מחק'}</span>
                    </button>
                  </div>
                </div>
                <textarea 
                  class="verse-note w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white" 
                  data-reference={reference} 
                  rows="3"
                  placeholder="Add your notes for this verse...">
                </textarea>
              </div>
            </div>
          );
        })}
      </div>
    </div>
    
    <!-- Notes section -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Notes</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Notes']}</span>
        </h3>
        
        <button id="save-notes-btn" class="px-4 py-2 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 transition">
          <span class="english-ui">Save Notes</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Save Notes'] || 'שמור הערות'}</span>
        </button>
      </div>

      <div class="bg-yellow-50 dark:bg-gray-700 border-l-4 border-yellow-400 p-4 mb-6">
        <p class="text-sm text-yellow-800 dark:text-yellow-200">
          <span class="english-ui">Notes for each verse are saved separately. Click "Save Notes" when you're done editing.</span>
          <span class="hebrew-ui hidden">הערות לכל פסוק נשמרות בנפרד. לחץ על "שמור הערות" כאשר סיימת לערוך.</span>
        </p>
      </div>

      <div class="prose prose-blue dark:prose-invert max-w-none mb-6">
        <div class="flex justify-between items-center mb-2">
          <h4 class="text-lg font-semibold">
            <span class="english-ui">General Notes</span>
            <span class="hebrew-ui hidden">{hebrewTranslations['General Notes'] || 'הערות כלליות'}</span>
          </h4>
          <div class="flex space-x-2">
            <button 
              id="general-note-save-btn"
              class="px-3 py-1 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 transition">
              <span class="english-ui">Save</span>
              <span class="hebrew-ui hidden">{hebrewTranslations['Save'] || 'שמור'}</span>
            </button>
          </div>
        </div>
        
        <textarea 
          id="general-note-textarea" 
          class="w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white mb-4" 
          rows="5"
          placeholder="Add your general notes for this day...">{notes}</textarea>
      </div>
    </div>
    
    <!-- Images section -->
    <div class="mt-10">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-2xl font-semibold">
          <span class="english-ui">Images</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Images']}</span>
        </h3>
        
        <!-- Image upload button -->
        <label for="image-upload" class="cursor-pointer px-4 py-2 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700 transition">
          <span class="english-ui">Upload Image</span>
          <span class="hebrew-ui hidden">{hebrewTranslations['Upload Image'] || 'העלאת תמונה'}</span>
        </label>
        <input type="file" id="image-upload" accept="image/*" class="hidden" />
      </div>
      
      <!-- Drag and drop area -->
      <div id="drag-drop-area" class="border-2 border-dashed dark:border-gray-600 rounded-lg p-6 mb-6 text-center transition-colors duration-200 ease-in-out">
        <div class="flex flex-col items-center justify-center space-y-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p class="text-gray-500 dark:text-gray-400">
            <span class="english-ui">Drag and drop images here</span>
            <span class="hebrew-ui hidden">{hebrewTranslations['Drag and drop images here']}</span>
          </p>
          <p class="text-gray-400 dark:text-gray-500 text-sm">
            <span class="english-ui">or click Upload Image to browse files</span>
            <span class="hebrew-ui hidden">או לחץ על העלאת תמונה לחיפוש קבצים</span>
          </p>
        </div>
      </div>
      
      <!-- Upload progress -->
      <div id="upload-progress" class="hidden mb-4">
        <div class="relative pt-1">
          <div class="flex mb-2 items-center justify-between">
            <div>
              <span id="upload-status" class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200">
                Uploading...  
              </span>
            </div>
            <div class="text-right">
              <span id="upload-percentage" class="text-xs font-semibold inline-block text-blue-600">
                0%
              </span>
            </div>
          </div>
          <div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200">
            <div id="upload-progress-bar" style="width:0%" class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
          </div>
        </div>
      </div>
      
      {images && images.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {images.map((image) => {
            // Check if it's a URL or a file path
            const trimmedImage = image.trim();
            const isFullUrl = trimmedImage.startsWith('http') || trimmedImage.startsWith('//');
            const imageSrc = isFullUrl ? trimmedImage : `/images/aviya/${trimmedImage}`;
            console.log('Loading image from:', imageSrc); // Debug log image source
            
            return (
              <div class="border dark:border-gray-700 rounded-lg overflow-hidden">
                <img 
                  src={imageSrc} 
                  alt={`Study image for ${formattedDate}`} 
                  class="w-full h-auto object-cover max-h-96"
                  loading="lazy" 
                  onload="console.log('Image loaded successfully:', this.src); this.style.opacity = 1;"
                  onerror="console.error('Failed to load image:', this.src); this.src='/images/placeholder-image.jpg';"
                  style="opacity: 0.6; transition: opacity 0.3s ease;"
                />
              </div>
            );
          })}
        </div>
      ) : (
        <div class="bg-gray-100 dark:bg-gray-800 border border-dashed dark:border-gray-700 rounded-lg p-10 text-center">
          <p class="text-gray-500 dark:text-gray-400">
            <span class="english-ui">No images available for this day</span>
            <span class="hebrew-ui hidden">אין תמונות זמינות ליום זה</span>
          </p>
        </div>
      )}
    </div>
  </div>
</Layout>

<style>
  /* Add any custom styles here */
  .font-serif {
    font-family: 'Times New Roman', serif;
  }
  
  /* Language toggle states */
  .hebrew-only .english-text {
    display: none;
  }
  
  .english-only .hebrew-text {
    display: none;
  }
  
  .lang-toggle.active {
    background-color: #2563eb; /* bg-blue-600 */
    color: white;
  }
  
  .dark .lang-toggle.active {
    background-color: #3b82f6; /* dark:bg-blue-500 */
  }
  
  /* For Hebrew UI, ensure proper direction */
  .hebrew-ui-active {
    direction: rtl;
  }
  
  /* Hidden elements */
  .hidden {
    display: none;
  }
</style>

<script>
  // Function to initialize the page (will be called on both DOMContentLoaded and astro:page-load)
  function initializePage() {
    console.log('Initializing page with URL: ' + window.location.pathname);
    const textContainer = document.querySelector('.grid.gap-8');
    const langButtons = document.querySelectorAll('.lang-toggle');
    const siteLanguageToggle = document.getElementById('siteLanguageToggle');
    const englishElements = document.querySelectorAll('.english-ui');
    const hebrewElements = document.querySelectorAll('.hebrew-ui');
    
    // Fetch Sefaria text content (moved from server-side to client-side)
    async function fetchSefariaTexts(attemptCount = 1) {
      console.log(`Attempting to fetch Sefaria texts (attempt ${attemptCount})...`);
      
      try {
        // Check if containers are ready
        const containers = document.querySelectorAll('.border.dark\\:border-gray-700.rounded-lg');
        
        if (containers.length === 0 && attemptCount < 5) {
          console.log('No text containers found yet, retrying in 1 second...');
          setTimeout(() => fetchSefariaTexts(attemptCount + 1), 1000);
          return;
        }
        
        // Get all reading references from the page
        const readingElements = document.querySelectorAll('ul li strong');
        const readings = Array.from(readingElements).map(el => {
          // Get the English reference text
          const englishSpan = el.querySelector('.english-ui');
          return englishSpan ? englishSpan.textContent.trim() : '';
        }).filter(ref => ref); // Filter out any empty references
        
        console.log(`Found ${readings.length} readings to fetch from Sefaria:`, readings);
        console.log(`Found ${containers.length} text containers to populate`);
        
        if (readings.length === 0 && attemptCount < 5) {
          console.log('No readings found yet, retrying in 1 second...');
          setTimeout(() => fetchSefariaTexts(attemptCount + 1), 1000);
          return;
        }
        
        // Fetch each reference text
        const fetchPromises = readings.map(async (reference) => {
          try {
            const response = await fetch(`https://www.sefaria.org/api/texts/${reference}?context=0`);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return { reference, data };
          } catch (error) {
            console.error(`Error fetching ${reference}:`, error);
            return { 
              reference, 
              data: { he: "שגיאה בטעינת הטקסט", text: "Error loading text" } 
            };
          }
        });
        
        const results = await Promise.all(fetchPromises);
        console.log(`Successfully retrieved ${results.length} texts from Sefaria API`);
        
        // Populate text containers
        let populatedCount = 0;
        
        containers.forEach((container, containerIndex) => {
          const titleEl = container.querySelector('h4');
          if (titleEl) {
            const englishTitleSpan = titleEl.querySelector('.english-ui');
            const reference = englishTitleSpan ? englishTitleSpan.textContent.trim() : '';
            
            if (reference) {
              // Find the matching result
              const result = results.find(r => r.reference === reference);
              
              if (result) {
                const hebrewTextDiv = container.querySelector('.hebrew-text');
                const englishTextDiv = container.querySelector('.english-text');
                
                if (hebrewTextDiv && result.data.he) {
                  hebrewTextDiv.innerHTML = result.data.he;
                  hebrewTextDiv.style.backgroundColor = '#f0fff4';
                  setTimeout(() => { hebrewTextDiv.style.backgroundColor = ''; }, 1000);
                }
                
                if (englishTextDiv && result.data.text) {
                  englishTextDiv.innerHTML = result.data.text;
                  englishTextDiv.style.backgroundColor = '#f0fff4';
                  setTimeout(() => { englishTextDiv.style.backgroundColor = ''; }, 1000);
                }
                
                populatedCount++;
                console.log(`Populated text container for ${reference}`);
              } else {
                console.warn(`No Sefaria result found for ${reference}`);
              }
            } else {
              console.warn(`No reference found in container ${containerIndex}`);
            }
          } else {
            console.warn(`No title element found in container ${containerIndex}`);
          }
        });
        
        console.log(`Sefaria texts loaded successfully! Populated ${populatedCount}/${containers.length} containers`);
      } catch (error) {
        console.error('Error fetching Sefaria texts:', error);
        if (attemptCount < 5) {
          console.log(`Retrying in ${attemptCount} seconds...`);
          setTimeout(() => fetchSefariaTexts(attemptCount + 1), attemptCount * 1000);
        }
      }
    }
    
    // First attempt after a small initial delay
    setTimeout(() => {
      fetchSefariaTexts();
    }, 500);
    const saveNotesBtn = document.getElementById('save-notes-btn');
    
    // Load existing verse notes
    loadVerseNotes().then(() => {
      // Set up event listeners for individual verse note actions
      addVerseNoteEventListeners();
      console.log('Verse note event listeners set up');
      
      // Set up general notes save button event listener
      const generalNoteSaveBtn = document.getElementById('general-note-save-btn');
      if (generalNoteSaveBtn) {
        generalNoteSaveBtn.addEventListener('click', async () => {
          console.log('General notes save button clicked');
          const generalNotesTextarea = document.getElementById('general-note-textarea');
          const generalNotes = generalNotesTextarea?.value || '';
          
          try {
            // Save general notes
            const response = await fetch('/api/save-verse-notes', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                date: window.location.pathname.split('/').pop(),
                notes: generalNotes,
                // Include any existing verse notes to avoid overwriting them
                verseNotes: window.currentVerseNotesData || {}
              }),
            });
            
            const result = await response.json();
            console.log('General notes save result:', result);
            
            // Visual confirmation
            const originalText = generalNoteSaveBtn.innerHTML;
            generalNoteSaveBtn.innerHTML = '<span class="english-ui">✓ Saved</span><span class="hebrew-ui hidden">✓ נשמר</span>';
            generalNoteSaveBtn.classList.add('bg-green-500');
            
            setTimeout(() => {
              generalNoteSaveBtn.innerHTML = originalText;
              generalNoteSaveBtn.classList.remove('bg-green-500');
            }, 2000);
          } catch (error) {
            console.error('Error saving general notes:', error);
            alert('Error saving general notes');
          }
        });
        console.log('General notes save button handler added');
      } else {
        console.warn('General notes save button not found');
      }
    }).catch(error => {
      console.error('Error during verse notes initialization:', error);
    });
    
    // Language toggle functionality
    langButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        langButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        button.classList.add('active');
        
        // Reset container classes
        textContainer.classList.remove('hebrew-only', 'english-only', 'both-langs');
        
        // Set appropriate class based on button ID
        if (button.id === 'hebrewOnly') {
          textContainer.classList.add('hebrew-only');
        } else if (button.id === 'englishOnly') {
          textContainer.classList.add('english-only');
        }
        
        // Update button styles
        langButtons.forEach(btn => {
          if (btn.classList.contains('active')) {
            btn.classList.remove('bg-gray-200', 'dark:bg-gray-700');
            btn.classList.add('bg-blue-600', 'text-white');
          } else {
            btn.classList.remove('bg-blue-600', 'text-white');
            btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-black', 'dark:text-white');
          }
        });
      });
    });
    
    // Site-wide language toggle (UI language)
    if (siteLanguageToggle) {
      // Check if there's a stored preference
      const savedLanguage = localStorage.getItem('aviyaUiLanguage');
      if (savedLanguage === 'hebrew') {
        document.body.classList.add('hebrew-ui-active');
        englishElements.forEach(el => el.classList.add('hidden'));
        hebrewElements.forEach(el => el.classList.remove('hidden'));
        document.documentElement.dir = 'rtl';
      }
      
      siteLanguageToggle.addEventListener('click', () => {
        document.body.classList.toggle('hebrew-ui-active');
        
        if (document.body.classList.contains('hebrew-ui-active')) {
          // Switch to Hebrew UI
          localStorage.setItem('aviyaUiLanguage', 'hebrew');
          englishElements.forEach(el => el.classList.add('hidden'));
          hebrewElements.forEach(el => el.classList.remove('hidden'));
          document.documentElement.dir = 'rtl';
        } else {
          // Switch to English UI
          localStorage.setItem('aviyaUiLanguage', 'english');
          englishElements.forEach(el => el.classList.remove('hidden'));
          hebrewElements.forEach(el => el.classList.add('hidden'));
          document.documentElement.dir = 'ltr';
        }
      });
    }
    
    // Add event listeners for individual verse note save and delete buttons
     const addVerseNoteEventListeners = () => {
    // Save verse note buttons
    document.querySelectorAll('.verse-save-btn').forEach(saveBtn => {
      // CORRECTED: The logic is now inside an async event listener callback.
      saveBtn.addEventListener('click', async (event) => {
        const reference = event.target.closest('.verse-save-btn').dataset.reference;
        const textarea = document.querySelector(`.verse-note[data-reference="${reference}"]`);

        if (!textarea) {
          console.error(`Could not find textarea for reference: ${reference}`);
          return;
        }

        // Update UI to show saving state
        const originalButtonText = saveBtn.innerHTML;
        saveBtn.disabled = true;
        saveBtn.classList.add('opacity-50');
        
        // Find the correct span to update text
          } else {
            // If empty text, remove the note
            delete verseNotes[reference];
          }

          // Send to server
          const response = await fetch('/api/save-verse-notes', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              date: currentDateParam,
              verseNotes: verseNotes
            })
          });

          if (!response.ok) {
            throw new Error('Failed to save note');
          }

          // Update our local copy
          window.currentVerseNotesData = verseNotes;

          // Update UI to show success
          if (englishSpan) englishSpan.textContent = 'Saved!';
          saveBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
          saveBtn.classList.add('bg-blue-600');

          // Reset after 2 seconds
          setTimeout(() => {
            saveBtn.innerHTML = originalButtonText;
            saveBtn.disabled = false;
            saveBtn.classList.remove('opacity-50', 'bg-blue-600');
            saveBtn.classList.add('bg-green-600', 'hover:bg-green-700');
          }, 2000);

        } catch (error) {
          console.error('Error saving verse note:', error);
          if (englishSpan) englishSpan.textContent = 'Error!';
          saveBtn.classList.remove('bg-green-600');
          saveBtn.classList.add('bg-red-600');

          // Reset after 2 seconds
          setTimeout(() => {
            saveBtn.innerHTML = originalButtonText;
            saveBtn.disabled = false;
            saveBtn.classList.remove('opacity-50', 'bg-red-600');
            saveBtn.classList.add('bg-green-600', 'hover:bg-green-700');
          }, 2000);
        }
      });
    });
      
       document.querySelectorAll('.verse-delete-btn').forEach(deleteBtn => {
      deleteBtn.addEventListener('click', async (event) => {
        const reference = event.target.closest('.verse-delete-btn').dataset.reference;
        const textarea = document.querySelector(`.verse-note[data-reference="${reference}"]`);

        if (!textarea) {
          console.error(`Could not find textarea for reference: ${reference}`);
          return;
        }

        // Update UI to show deleting state
        const originalButtonText = deleteBtn.innerHTML;
        deleteBtn.disabled = true;
        deleteBtn.classList.add('opacity-50');
        const englishSpan = deleteBtn.querySelector('.english-ui');
        if(englishSpan) englishSpan.textContent = 'Deleting...';

        try {
          // Get the current date parameter
          const currentDateParam = window.location.pathname.split('/').pop();
          
          // Get the current verse notes or initialize empty object
          const verseNotes = window.currentVerseNotesData || {};
          
          // Remove this note
          delete verseNotes[reference];
          
          // Clear the textarea
          textarea.value = '';
          
          // Send to server
          const response = await fetch('/api/save-verse-notes', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              date: currentDateParam,
              verseNotes: verseNotes
            })
          });

          if (!response.ok) {
            throw new Error('Failed to delete note');
          }

          // Update our local copy
          window.currentVerseNotesData = verseNotes;

          // Update UI to show success
          if (englishSpan) englishSpan.textContent = 'Deleted!';
          deleteBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
          deleteBtn.classList.add('bg-blue-600');

          // Reset after 2 seconds
          setTimeout(() => {
            deleteBtn.innerHTML = originalButtonText;
            deleteBtn.disabled = false;
            deleteBtn.classList.remove('opacity-50', 'bg-blue-600');
            deleteBtn.classList.add('bg-red-600', 'hover:bg-red-700');
          }, 2000);

        } catch (error) {
          console.error('Error deleting verse note:', error);
          if (englishSpan) englishSpan.textContent = 'Error!';
          deleteBtn.classList.add('bg-yellow-600');

          // Reset after 2 seconds
          setTimeout(() => {
            deleteBtn.innerHTML = originalButtonText;
            deleteBtn.disabled = false;
            deleteBtn.classList.remove('opacity-50', 'bg-yellow-600');
            deleteBtn.classList.add('bg-red-600', 'hover:bg-red-700');
          }, 2000);
        }
      });
    });
  };
    
    // Save notes button functionality (keep as a global save option)
    if (saveNotesBtn) {
      // Keep track of the original button content for restoration
      const originalButtonText = saveNotesBtn.innerHTML;
      
      saveNotesBtn.addEventListener('click', async () => {
        // Disable button and show loading state
        saveNotesBtn.disabled = true;
        saveNotesBtn.classList.add('opacity-50');
        saveNotesBtn.textContent = 'Saving...';
        
        try {
          // Collect all verse notes
          const noteTextareas = document.querySelectorAll('.verse-note');
          const verseNotes = {};
          
          noteTextareas.forEach(textarea => {
            const reference = textarea.dataset.reference;
            const noteText = textarea.value.trim();
            if (noteText) { // Only save non-empty notes
              verseNotes[reference] = noteText;
            }
          });
          
          const currentDateParam = window.location.pathname.split('/').pop();
          
          // Send to server
          const response = await fetch('/api/save-verse-notes', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              date: currentDateParam,
              verseNotes: verseNotes
            })
          });
          
          if (!response.ok) {
            throw new Error('Failed to save notes');
          }
          
          // Update UI to show success
          saveNotesBtn.textContent = 'Notes Saved!';
          saveNotesBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
          saveNotesBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            saveNotesBtn.innerHTML = originalButtonText;
            saveNotesBtn.disabled = false;
            saveNotesBtn.classList.remove('opacity-50');
            saveNotesBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            saveNotesBtn.classList.add('bg-green-600', 'hover:bg-green-700');
          }, 2000);
          
        } catch (error) {
          console.error('Error saving verse notes:', error);
          saveNotesBtn.textContent = 'Error Saving!';
          saveNotesBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
          saveNotesBtn.classList.add('bg-red-600', 'hover:bg-red-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            const isHebrew = document.body.classList.contains('hebrew-ui-active');
            saveNotesBtn.innerHTML = isHebrew ? 
              '<span class="hebrew-ui">שמור הערות</span>' : 
              '<span class="english-ui">Save Notes</span>';
            saveNotesBtn.disabled = false;
            saveNotesBtn.classList.remove('opacity-50');
            saveNotesBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
            saveNotesBtn.classList.add('bg-green-600', 'hover:bg-green-700');
          }, 2000);
        }
      });
    }
    
    // Function to load verse notes
  async function loadVerseNotes() {
    try {
      const response = await fetch(`/api/load-verse-notes?date=${currentDateParam}`);
      const data = await response.json();
      window.currentVerseNotesData = data.verseNotes || {};
      console.log('Loaded verse notes into global variable:', window.currentVerseNotesData);

      // Handle general notes display
      if (data.notes) {
        console.log('General notes found:', data.notes);
        const generalNotesTextarea = document.getElementById('general-note-textarea');
        if (generalNotesTextarea) {
          generalNotesTextarea.value = data.notes;
        }
      }  }
        
        // DIRECT APPROACH: Populate verse notes using textareas array
        if (data.verseNotes) {
          console.log('Populating verse notes from data');
          const textareas = document.querySelectorAll('.verse-note');
          console.log(`Found ${textareas.length} verse note textareas`);
          
          // Log all available textareas for reference
          textareas.forEach((ta, i) => {
            console.log(`Textarea ${i}: data-reference="${ta.dataset.reference}"`);
          });
          
          // Use direct index access for specific verse references we know about
          if (data.verseNotes['Genesis 1:14']) {
            // Genesis 1:14 should be the first textarea (index 0)
            if (textareas[0]) {
              console.log(`Setting note for Genesis 1:14: ${data.verseNotes['Genesis 1:14']}`);
              textareas[0].value = data.verseNotes['Genesis 1:14'];
              // Visual feedback
              textareas[0].style.backgroundColor = '#f0fff4';
              setTimeout(() => { textareas[0].style.backgroundColor = ''; }, 1000);
            }
          }
          
          if (data.verseNotes['Genesis 1:26']) {
            // Genesis 1:26 should be textarea index 12 (13th item)
            if (textareas[12]) {
              console.log(`Setting note for Genesis 1:26: ${data.verseNotes['Genesis 1:26']}`);
              textareas[12].value = data.verseNotes['Genesis 1:26'];
              // Visual feedback
              textareas[12].style.backgroundColor = '#f0fff4';
              setTimeout(() => { textareas[12].style.backgroundColor = ''; }, 1000);
            }
          }
          
          // Also try to match by data-reference attribute
          Object.entries(data.verseNotes).forEach(([reference, note]) => {
            textareas.forEach(textarea => {
              if (textarea.dataset.reference === reference) {
                console.log(`Found match by data-reference: ${reference}`);
                textarea.value = note;
                textarea.style.backgroundColor = '#f0fff4';
                setTimeout(() => { textarea.style.backgroundColor = ''; }, 1000);
              }
            });
          });
        }
      } catch (error) {
        console.error('Error loading verse notes:', error);
      }
    }
  }
  
  // Initialize on both initial page load and Astro's view transitions
  document.addEventListener('DOMContentLoaded', initializePage);
  document.addEventListener('astro:page-load', initializePage);

  function setupImageUpload() {
    const dragDropArea = document.getElementById('drag-drop-area');
    const fileInput = document.getElementById('image-upload');
    const uploadProgress = document.getElementById('upload-progress');
    const uploadProgressBar = document.getElementById('upload-progress-bar');
    const uploadPercentage = document.getElementById('upload-percentage');
    const uploadStatus = document.getElementById('upload-status');
    
    if (!dragDropArea || !fileInput) return;
    
    // Handle drag events
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dragDropArea.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    // Handle visual feedback
    ['dragenter', 'dragover'].forEach(eventName => {
      dragDropArea.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      dragDropArea.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight() {
      dragDropArea.classList.add('bg-blue-50', 'dark:bg-blue-900/20', 'border-blue-300', 'dark:border-blue-700');
    }
    
    function unhighlight() {
      dragDropArea.classList.remove('bg-blue-50', 'dark:bg-blue-900/20', 'border-blue-300', 'dark:border-blue-700');
    }
    
    // Handle file drop
    dragDropArea.addEventListener('drop', handleDrop, false);
    
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      if (files.length > 0) {
        uploadImage(files[0]);
      }
    }
    
    // Handle file input
    fileInput.addEventListener('change', function() {
      if (this.files && this.files[0]) {
        uploadImage(this.files[0]);
      }
    });
    
    // Upload the image
    function uploadImage(file) {
      // Check if file is an image
      if (!file.type.match('image.*')) {
        alert('Please select an image file.');
        return;
      }
      
      // Show progress
      uploadProgress.classList.remove('hidden');
      uploadStatus.textContent = 'Uploading...';
      uploadProgressBar.style.width = '0%';
      uploadPercentage.textContent = '0%';
      
      const formData = new FormData();
      formData.append('image', file);
      formData.append('date', currentDateParam);
      
      const xhr = new XMLHttpRequest();
      
      // Track upload progress
      xhr.upload.addEventListener('progress', function(e) {
        if (e.lengthComputable) {
          const percentComplete = Math.round((e.loaded / e.total) * 100);
          uploadProgressBar.style.width = percentComplete + '%';
          uploadPercentage.textContent = percentComplete + '%';
        }
      });
      
      // Handle response
      xhr.onload = function() {
        if (xhr.status === 200) {
          const response = JSON.parse(xhr.responseText);
          console.log('Upload successful:', response);
          uploadStatus.textContent = 'Upload Complete';
          uploadProgressBar.style.width = '100%';
          
          // Refresh images display after a short delay
          setTimeout(() => {
            location.reload(); // Refresh to show the new image
          }, 1500);
        } else {
          console.error('Upload failed:', xhr.responseText);
          uploadStatus.textContent = 'Upload Failed';
          uploadStatus.classList.remove('text-blue-600', 'bg-blue-200');
          uploadStatus.classList.add('text-red-600', 'bg-red-200');
        }
      };
      
      // Handle errors
      xhr.onerror = function() {
        console.error('Upload error');
        uploadStatus.textContent = 'Upload Error';
        uploadStatus.classList.remove('text-blue-600', 'bg-blue-200');
        uploadStatus.classList.add('text-red-600', 'bg-red-200');
      };
      
      // Send the request
      xhr.open('POST', '/api/upload-image', true);
      xhr.send(formData);
    }
  }
