---
import Layout from '../layouts/Layout.astro';
---

<Layout 
    title="3D Model Catapult"
    description="Interactive 3D catapult game - Launch models at floating text targets!"
>
    <div id="canvas-container" class="catapult-container">
        <div id="text-targets"></div>
        <div id="loading">Loading...</div>
        <div class="controls">
            <div class="score">Score: <span id="score-value">0</span></div>
            <div class="instructions">Drag and throw the 3D model at the targets!</div>
        </div>
    </div>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .catapult-container {
            font-family: 'Inter', sans-serif;
            width: 100%;
            height: 100vh;
            position: relative;
            overflow: hidden;
            background: linear-gradient(to bottom, #1a1a1a, #2d2d2d);
            cursor: grab;
        }
        
        .catapult-container.dragging {
            cursor: grabbing;
        }

        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            gap: 15px;
            z-index: 10;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        label {
            color: white;
            font-size: 14px;
            font-weight: bold;
        }

        input[type="range"] {
            width: 200px;
            height: 6px;
            border-radius: 3px;
            background: #ddd;
            outline: none;
            -webkit-appearance: none;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: #06b6d4;
            cursor: pointer;
            transition: background 0.2s;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            background: #0891b2;
        }

        .launch-button {
            background: #06b6d4;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.2s;
        }

        .launch-button:hover {
            background: #0891b2;
        }

        .score {
            color: white;
            font-size: 18px;
            font-weight: bold;
            text-align: center;
        }

        #text-targets {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
        }

        .text-element {
            position: absolute;
            font-size: 24px;
            font-weight: bold;
            color: rgba(255, 255, 255, 0.9);
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            transition: all 0.5s ease;
        }

        .text-element.hit {
            transform: scale(2);
            opacity: 0;
        }

        #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            text-align: center;
            z-index: 20;
        }
    </style>

    <script is:inline src="https://unpkg.com/three@0.128.0/build/three.min.js"></script>
    <script is:inline src="https://unpkg.com/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/@pmndrs/cannon-es@0.20.0/dist/cannon-es.umd.js"></script>

    <script is:inline>
// === Three.js Setup ===
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 6, 16);
camera.lookAt(0, 1, 0);
const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.getElementById('canvas-container').appendChild(renderer.domElement);

// === Lighting ===
scene.add(new THREE.AmbientLight(0xffffff, 0.7));
const dirLight = new THREE.DirectionalLight(0xffffff, 1);
dirLight.position.set(10, 20, 10);
scene.add(dirLight);

// === Physics World ===
const world = new CANNON.World({ gravity: new CANNON.Vec3(0, -9.82, 0) });

// === Ground (Physics + Visual) ===
const groundMat = new CANNON.Material();
const groundBody = new CANNON.Body({ mass: 0, shape: new CANNON.Box(new CANNON.Vec3(10, 0.5, 10)), material: groundMat });
groundBody.position.set(0, -0.5, 0);
world.addBody(groundBody);
const groundGeo = new THREE.BoxGeometry(20, 1, 20);
const groundMesh = new THREE.Mesh(groundGeo, new THREE.MeshPhongMaterial({ color: 0xBAD4FF }));
groundMesh.position.copy(groundBody.position);
scene.add(groundMesh);

// === Slingshot Poles ===
const poleGeo = new THREE.CylinderGeometry(0.1, 0.1, 2, 16);
const poleMat = new THREE.MeshPhongMaterial({ color: 0x8B5A2B });
const leftPole = new THREE.Mesh(poleGeo, poleMat);
leftPole.position.set(-1.2, 1, 0);
scene.add(leftPole);
const rightPole = new THREE.Mesh(poleGeo, poleMat);
rightPole.position.set(1.2, 1, 0);
scene.add(rightPole);

// === Bird (Physics + Visual) ===
const birdMat = new CANNON.Material();
const birdBody = new CANNON.Body({ mass: 1, shape: new CANNON.Sphere(0.4), material: birdMat, position: new CANNON.Vec3(0, 1, 0) });
world.addBody(birdBody);
const birdGeo = new THREE.SphereGeometry(0.4, 32, 32);
const birdMesh = new THREE.Mesh(birdGeo, new THREE.MeshPhongMaterial({ color: 0xff4444 }));
scene.add(birdMesh);

// === Targets (Physics + Visual) ===
const targets = [];
const targetTexts = ['BLOCK', 'TARGET', 'HIT ME'];
for (let i = 0; i < 3; i++) {
  const x = 4 + i * 2;
  const y = 1.5;
  const boxBody = new CANNON.Body({ mass: 2, shape: new CANNON.Box(new CANNON.Vec3(0.8, 0.5, 0.8)), position: new CANNON.Vec3(x, y, 0) });
  world.addBody(boxBody);
  const boxGeo = new THREE.BoxGeometry(1.6, 1, 1.6);
  const boxMesh = new THREE.Mesh(boxGeo, new THREE.MeshPhongMaterial({ color: 0x4CAF50 }));
  scene.add(boxMesh);
  // Add readable text sprite
  const canvas = document.createElement('canvas');
  canvas.width = 512;
  canvas.height = 128;
  const ctx = canvas.getContext('2d');
  ctx.fillStyle = 'rgba(0,0,0,0.7)';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.font = 'bold 64px Arial';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.lineWidth = 8;
  ctx.strokeStyle = '#FFD700';
  ctx.strokeText(targetTexts[i], canvas.width/2, canvas.height/2);
  ctx.fillStyle = '#fff';
  ctx.fillText(targetTexts[i], canvas.width/2, canvas.height/2);
  const texture = new THREE.CanvasTexture(canvas);
  const spriteMat = new THREE.SpriteMaterial({ map: texture, transparent: true });
  const sprite = new THREE.Sprite(spriteMat);
  sprite.scale.set(2.5, 0.6, 1);
  sprite.position.set(0, 0.7, 0.85);
  boxMesh.add(sprite);
  targets.push({ body: boxBody, mesh: boxMesh });
}

// === Slingshot Band ===
const bandMat = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 8 });
const bandPoints = [leftPole.position, birdMesh.position, rightPole.position];
const bandGeo = new THREE.BufferGeometry().setFromPoints(bandPoints);
const band = new THREE.Line(bandGeo, bandMat);
scene.add(band);

// === Drag Logic ===
let isDragging = false;
let dragOffset = new THREE.Vector3();
let dragStart = new THREE.Vector3();
let launchReady = false;

renderer.domElement.addEventListener('pointerdown', (event) => {
  // Project mouse to 3D
  const mouse = new THREE.Vector2(
    (event.clientX / window.innerWidth) * 2 - 1,
    -(event.clientY / window.innerHeight) * 2 + 1
  );
  const raycaster = new THREE.Raycaster();
  raycaster.setFromCamera(mouse, camera);
  const intersects = raycaster.intersectObject(birdMesh);
  if (intersects.length > 0 && !launchReady) {
    isDragging = true;
    dragStart.copy(birdMesh.position);
    dragOffset.subVectors(birdMesh.position, intersects[0].point);
  }
});

renderer.domElement.addEventListener('pointermove', (event) => {
  if (!isDragging) return;
  // Project mouse to plane at y=1
  const mouse = new THREE.Vector2(
    (event.clientX / window.innerWidth) * 2 - 1,
    -(event.clientY / window.innerHeight) * 2 + 1
  );
  const raycaster = new THREE.Raycaster();
  raycaster.setFromCamera(mouse, camera);
  const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), -1);
  const intersect = new THREE.Vector3();
  raycaster.ray.intersectPlane(plane, intersect);
  // Clamp drag range
  const minX = -5, maxX = 0, minY = 0.5, maxY = 3, minZ = -2, maxZ = 2;
  intersect.x = Math.max(minX, Math.min(maxX, intersect.x));
  intersect.y = Math.max(minY, Math.min(maxY, intersect.y));
  intersect.z = Math.max(minZ, Math.min(maxZ, intersect.z));
  birdBody.position.copy(intersect);
  birdBody.velocity.set(0, 0, 0);
  birdBody.angularVelocity.set(0, 0, 0);
  launchReady = true;
});

renderer.domElement.addEventListener('pointerup', (event) => {
  if (!isDragging) return;
  isDragging = false;
  if (launchReady) {
    // Launch velocity is proportional to drag distance
    const launchVec = new CANNON.Vec3().copy(birdBody.position).vsub(new CANNON.Vec3(0, 1, 0)).scale(-4);
    birdBody.velocity.copy(launchVec);
    birdBody.angularVelocity.set(2, 2, 0);
    launchReady = false;
  }
});

// === Animation Loop ===
function animate() {
  requestAnimationFrame(animate);
  world.fixedStep();
  // Sync Three.js meshes with Cannon bodies
  birdMesh.position.copy(birdBody.position);
  birdMesh.quaternion.copy(birdBody.quaternion);
  targets.forEach(({ body, mesh }) => {
    mesh.position.copy(body.position);
    mesh.quaternion.copy(body.quaternion);
  });
  // Update slingshot band
  band.geometry.setFromPoints([
    leftPole.position,
    birdMesh.position,
    rightPole.position
  ]);
  renderer.render(scene, camera);
}
animate();
</script>
</Layout>
                   